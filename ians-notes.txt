Short term plan to gain momentum (currently developing ONLY on linux).

Incorporate the locking code and write some mutltithreaded tests.
Use valgrind (helgrind) to detect races.
Go from there.


autoconf
./configure --enable-mcsat
make MODE=debug



To build the tests:

make MODE=debug test

(tests end up in the build/*/bin directory)



BD: do we want to make thread safety  an "option"  (BD yes to a configure option.)

BD: overhead of error_report vs new blocks? (BD: fine as is for now.)

N.B.:

yices_lock_free.h is a lock_free version of the api


The following API functions are not thread safe. Nor should
we attempt to make them so. It should be well documented.

<non-thread-safe api routines>
 void yices_init(void);
 void yices_exit(void);
 void yices_reset(void);
</non-thread-safe api routines>

Things like term vectors are not protected. You should not pass them from thread to thread
unless you, qua user, protect them.


problematic (assumming it is not the case that HAVE_TLS:

<problematic>
 error_report_t *yices_error_report(void);
 error_report_t *yices_get_error_report(void);
 error_code_t yices_error_code(void);
 void yices_clear_error(void);
 int32_t yices_print_error(FILE *f);
 ...

===============================================================================================
For  Discussion:

Ian's current idea is that we have a configure flag for thread safety and it requires HAVE_TLS,
and is currently incompatible with --enable-mcsat.



//BD: for the time being only one parser (maybe later a parser per thread would be OK)


===============================================================================================



/***********************************
 *  EXTENSIONS: TERM CONSTRUCTORS  *
 **********************************/

/*******************************************
 *  EXTENSIONS: SUPPORT FOR TYPE CHECKING  *
 ******************************************/
</problematic>



Questions:

do models change internally once they are created?

do we really want to protect things like config_t param_t with locks?
wouldn't it be better to have a "principled approach to thread safety?"

principles like:

params, configs, contexts and models, should not be shared across threads.



BD: if the buffers are only used from the term stack then they could be migrated into the global struct.
Need to check each one.

x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	arith_buffer_list
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	bvarith64_buffer_list
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	bvarith_buffer_list
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	bvlogic_buffer_list

Current issues in yices_api.c

  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	bv0

  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	r0

  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	context_list
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	ctx_option_names //BD: constant array
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	generic_list
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	model_list
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	root_terms
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	root_types
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	the_root_terms
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	the_root_types
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	__yices_error
  x86_64-pc-linux-gnu-debug/obj/api/yices_api.o	__yices_error_initialized
