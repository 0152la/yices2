(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFBV)
(declare-fun f0 ( (_ BitVec 7) (_ BitVec 4) (_ BitVec 5)) (_ BitVec 12))
(declare-fun p0 ( (_ BitVec 11) (_ BitVec 16)) Bool)
(declare-fun v0 () (_ BitVec 3))
(declare-fun v1 () (_ BitVec 5))
(declare-fun v2 () (_ BitVec 4))
(declare-fun v3 () (_ BitVec 15))
(assert (let ((e4(_ bv18 5)))
(let ((e5(_ bv30 5)))
(let ((e6 ((_ rotate_left 2) v0)))
(let ((e7 (bvand ((_ sign_extend 11) v2) v3)))
(let ((e8 (ite (p0 ((_ zero_extend 8) e6) ((_ zero_extend 1) v3)) (_ bv1 1) (_ bv0 1))))
(let ((e9 (bvsub v2 ((_ zero_extend 1) e6))))
(let ((e10 (bvnor ((_ zero_extend 14) e8) v3)))
(let ((e11 (bvnot v1)))
(let ((e12 (ite (bvsge e10 ((_ zero_extend 10) e4)) (_ bv1 1) (_ bv0 1))))
(let ((e13 (ite (distinct e9 ((_ sign_extend 3) e8)) (_ bv1 1) (_ bv0 1))))
(let ((e14 (f0 ((_ zero_extend 4) e6) ((_ extract 3 0) e4) ((_ zero_extend 4) e8))))
(let ((e15 (bvnand e10 ((_ zero_extend 11) v2))))
(let ((e16 (bvcomp e7 e15)))
(let ((e17 ((_ rotate_left 0) v2)))
(let ((e18 (bvadd ((_ zero_extend 1) v2) e5)))
(let ((e19 (bvule e11 ((_ sign_extend 2) e6))))
(let ((e20 (p0 ((_ zero_extend 10) e12) ((_ zero_extend 11) e5))))
(let ((e21 (distinct e6 ((_ sign_extend 2) e13))))
(let ((e22 (bvule ((_ sign_extend 2) e12) v0)))
(let ((e23 (bvule ((_ zero_extend 2) v0) e18)))
(let ((e24 (bvult ((_ sign_extend 2) v0) e4)))
(let ((e25 (distinct ((_ sign_extend 2) e6) e4)))
(let ((e26 (p0 ((_ sign_extend 7) v2) ((_ sign_extend 12) v2))))
(let ((e27 (= ((_ sign_extend 12) e6) v3)))
(let ((e28 (bvsle e18 e18)))
(let ((e29 (bvsge v1 ((_ sign_extend 1) e9))))
(let ((e30 (bvsgt ((_ sign_extend 4) e13) e11)))
(let ((e31 (= e15 ((_ zero_extend 12) e6))))
(let ((e32 (= ((_ zero_extend 9) e6) e14)))
(let ((e33 (bvsle ((_ zero_extend 1) v2) e18)))
(let ((e34 (= ((_ sign_extend 11) e17) e10)))
(let ((e35 (distinct ((_ sign_extend 1) v2) e18)))
(let ((e36 (bvsge e17 e9)))
(let ((e37 (bvsgt e5 ((_ sign_extend 4) e13))))
(let ((e38 (bvsle e6 ((_ sign_extend 2) e13))))
(let ((e39 (bvult e11 ((_ zero_extend 1) v2))))
(let ((e40 (bvule e5 v1)))
(let ((e41 (bvslt v2 ((_ zero_extend 1) v0))))
(let ((e42 (bvsgt ((_ sign_extend 4) e13) e18)))
(let ((e43 (p0 ((_ extract 14 4) v3) ((_ zero_extend 15) e16))))
(let ((e44 (= ((_ sign_extend 2) e6) e5)))
(let ((e45 (bvule e5 ((_ zero_extend 1) e9))))
(let ((e46 (bvslt e15 e10)))
(let ((e47 (bvult ((_ zero_extend 3) e14) v3)))
(let ((e48 (bvsle e18 ((_ sign_extend 2) v0))))
(let ((e49 (p0 ((_ sign_extend 6) v1) ((_ zero_extend 12) e17))))
(let ((e50 (bvsle v3 ((_ zero_extend 10) e11))))
(let ((e51 (bvult v3 ((_ zero_extend 14) e8))))
(let ((e52 (bvugt v1 e18)))
(let ((e53 (p0 ((_ sign_extend 6) v1) ((_ sign_extend 15) e8))))
(let ((e54 (bvugt ((_ zero_extend 12) e6) e10)))
(let ((e55 (distinct e13 e13)))
(let ((e56 (bvsge e11 ((_ zero_extend 2) e6))))
(let ((e57 (bvuge e15 ((_ sign_extend 14) e13))))
(let ((e58 (bvsge ((_ zero_extend 2) e6) v1)))
(let ((e59 (bvsgt e7 ((_ zero_extend 14) e13))))
(let ((e60 (or e25 e38)))
(let ((e61 (xor e29 e47)))
(let ((e62 (=> e53 e21)))
(let ((e63 (= e43 e35)))
(let ((e64 (not e27)))
(let ((e65 (or e32 e51)))
(let ((e66 (ite e50 e31 e64)))
(let ((e67 (not e36)))
(let ((e68 (not e41)))
(let ((e69 (xor e65 e39)))
(let ((e70 (ite e54 e52 e67)))
(let ((e71 (or e42 e70)))
(let ((e72 (xor e24 e30)))
(let ((e73 (and e63 e34)))
(let ((e74 (not e56)))
(let ((e75 (or e73 e22)))
(let ((e76 (= e61 e48)))
(let ((e77 (= e57 e74)))
(let ((e78 (= e68 e37)))
(let ((e79 (and e46 e49)))
(let ((e80 (or e71 e23)))
(let ((e81 (and e66 e77)))
(let ((e82 (xor e58 e44)))
(let ((e83 (ite e45 e69 e62)))
(let ((e84 (ite e26 e26 e28)))
(let ((e85 (or e76 e78)))
(let ((e86 (and e82 e85)))
(let ((e87 (ite e86 e83 e83)))
(let ((e88 (= e40 e79)))
(let ((e89 (=> e19 e59)))
(let ((e90 (and e75 e60)))
(let ((e91 (=> e81 e88)))
(let ((e92 (xor e72 e89)))
(let ((e93 (or e33 e92)))
(let ((e94 (and e91 e90)))
(let ((e95 (or e55 e55)))
(let ((e96 (and e93 e93)))
(let ((e97 (=> e80 e94)))
(let ((e98 (not e84)))
(let ((e99 (or e96 e87)))
(let ((e100 (=> e99 e99)))
(let ((e101 (xor e20 e98)))
(let ((e102 (or e97 e95)))
(let ((e103 (= e101 e100)))
(let ((e104 (not e102)))
(let ((e105 (=> e103 e104)))
e105
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
