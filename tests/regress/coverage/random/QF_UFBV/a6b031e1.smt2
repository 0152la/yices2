(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFBV)
(declare-fun f0 ( (_ BitVec 4) (_ BitVec 10) (_ BitVec 4)) (_ BitVec 2))
(declare-fun p0 ( (_ BitVec 8)) Bool)
(declare-fun p1 ( (_ BitVec 14)) Bool)
(declare-fun v0 () (_ BitVec 3))
(declare-fun v1 () (_ BitVec 8))
(declare-fun v2 () (_ BitVec 14))
(assert (let ((e3(_ bv3 5)))
(let ((e4(_ bv2 3)))
(let ((e5 (ite (p1 ((_ zero_extend 6) v1)) (_ bv1 1) (_ bv0 1))))
(let ((e6 (bvxor v1 ((_ zero_extend 7) e5))))
(let ((e7 (bvurem v0 v0)))
(let ((e8 (bvor e6 ((_ zero_extend 3) e3))))
(let ((e9 (f0 ((_ extract 3 0) e3) ((_ sign_extend 7) v0) ((_ extract 4 1) e3))))
(let ((e10 (ite (p0 ((_ zero_extend 7) e5)) (_ bv1 1) (_ bv0 1))))
(let ((e11 (ite (distinct ((_ zero_extend 6) v1) v2) (_ bv1 1) (_ bv0 1))))
(let ((e12 (bvneg e10)))
(let ((e13 (bvnot v2)))
(let ((e14 (bvashr e12 e11)))
(let ((e15 ((_ rotate_right 5) v1)))
(let ((e16 (bvmul ((_ zero_extend 5) v0) v1)))
(let ((e17 (ite (= v1 ((_ sign_extend 7) e11)) (_ bv1 1) (_ bv0 1))))
(let ((e18 (concat e12 e15)))
(let ((e19 (bvand e13 ((_ sign_extend 13) e11))))
(let ((e20 (ite (bvslt e13 ((_ sign_extend 6) e8)) (_ bv1 1) (_ bv0 1))))
(let ((e21 (bvudiv ((_ sign_extend 7) e14) v1)))
(let ((e22 (ite (bvsge e16 ((_ zero_extend 7) e11)) (_ bv1 1) (_ bv0 1))))
(let ((e23 (bvshl ((_ sign_extend 11) e4) v2)))
(let ((e24 (p1 ((_ zero_extend 6) e8))))
(let ((e25 (p1 ((_ sign_extend 13) e12))))
(let ((e26 (bvsge e13 ((_ sign_extend 13) e14))))
(let ((e27 (p0 e15)))
(let ((e28 (bvslt ((_ zero_extend 13) e11) e13)))
(let ((e29 (bvule v2 ((_ sign_extend 13) e12))))
(let ((e30 (bvult ((_ sign_extend 13) e17) e19)))
(let ((e31 (bvslt v0 e4)))
(let ((e32 (bvule ((_ zero_extend 7) e10) e15)))
(let ((e33 (bvuge e17 e11)))
(let ((e34 (distinct e10 e5)))
(let ((e35 (bvsle e21 ((_ zero_extend 3) e3))))
(let ((e36 (distinct ((_ sign_extend 1) v1) e18)))
(let ((e37 (bvule e8 ((_ zero_extend 7) e12))))
(let ((e38 (bvule e23 ((_ sign_extend 13) e11))))
(let ((e39 (bvsle ((_ sign_extend 7) e14) e16)))
(let ((e40 (bvule e6 ((_ sign_extend 5) e7))))
(let ((e41 (bvsgt ((_ sign_extend 13) e17) e19)))
(let ((e42 (bvuge ((_ sign_extend 7) e10) e8)))
(let ((e43 (bvslt ((_ zero_extend 2) e10) e7)))
(let ((e44 (bvule e4 ((_ zero_extend 2) e12))))
(let ((e45 (bvule ((_ sign_extend 6) e6) e19)))
(let ((e46 (bvslt ((_ sign_extend 5) e4) v1)))
(let ((e47 (distinct ((_ sign_extend 2) e11) e7)))
(let ((e48 (bvuge e6 ((_ sign_extend 7) e17))))
(let ((e49 (p0 e21)))
(let ((e50 (distinct v1 ((_ zero_extend 5) v0))))
(let ((e51 (bvugt e21 ((_ sign_extend 7) e10))))
(let ((e52 (bvslt ((_ sign_extend 2) e14) v0)))
(let ((e53 (bvult e17 e12)))
(let ((e54 (= ((_ sign_extend 2) v0) e3)))
(let ((e55 (bvsgt ((_ sign_extend 4) e10) e3)))
(let ((e56 (bvugt ((_ sign_extend 5) e7) e6)))
(let ((e57 (bvuge e19 ((_ zero_extend 13) e20))))
(let ((e58 (bvsle ((_ zero_extend 7) e5) e8)))
(let ((e59 (bvsge ((_ zero_extend 3) e3) e6)))
(let ((e60 (bvsgt e20 e12)))
(let ((e61 (bvslt ((_ sign_extend 1) e11) e9)))
(let ((e62 (bvuge e12 e17)))
(let ((e63 (bvsgt ((_ zero_extend 2) e20) e4)))
(let ((e64 (= e12 e10)))
(let ((e65 (distinct e6 ((_ sign_extend 5) e4))))
(let ((e66 (= e8 ((_ zero_extend 5) v0))))
(let ((e67 (bvule ((_ zero_extend 7) e10) e6)))
(let ((e68 (bvugt ((_ zero_extend 6) e9) v1)))
(let ((e69 (distinct e14 e17)))
(let ((e70 (bvugt v1 v1)))
(let ((e71 (= ((_ sign_extend 2) e5) e4)))
(let ((e72 (bvsle e18 ((_ sign_extend 7) e9))))
(let ((e73 (p1 ((_ sign_extend 9) e3))))
(let ((e74 (p1 ((_ sign_extend 6) e8))))
(let ((e75 (bvule e4 v0)))
(let ((e76 (bvule e8 ((_ sign_extend 5) v0))))
(let ((e77 (bvsgt e8 e6)))
(let ((e78 (distinct ((_ sign_extend 5) v0) e16)))
(let ((e79 (bvugt e6 v1)))
(let ((e80 (bvuge ((_ zero_extend 7) e20) e8)))
(let ((e81 (bvsge e19 e23)))
(let ((e82 (bvule ((_ zero_extend 7) e5) e15)))
(let ((e83 (p0 ((_ sign_extend 7) e12))))
(let ((e84 (bvult e20 e22)))
(let ((e85 (or e49 e27)))
(let ((e86 (xor e75 e26)))
(let ((e87 (or e56 e85)))
(let ((e88 (or e73 e28)))
(let ((e89 (and e86 e86)))
(let ((e90 (not e51)))
(let ((e91 (not e64)))
(let ((e92 (not e87)))
(let ((e93 (and e35 e55)))
(let ((e94 (and e92 e33)))
(let ((e95 (xor e82 e68)))
(let ((e96 (and e93 e84)))
(let ((e97 (= e58 e54)))
(let ((e98 (and e66 e50)))
(let ((e99 (not e65)))
(let ((e100 (ite e52 e44 e71)))
(let ((e101 (not e46)))
(let ((e102 (xor e70 e95)))
(let ((e103 (= e94 e96)))
(let ((e104 (not e40)))
(let ((e105 (ite e63 e81 e61)))
(let ((e106 (xor e48 e32)))
(let ((e107 (=> e37 e101)))
(let ((e108 (xor e78 e104)))
(let ((e109 (and e107 e42)))
(let ((e110 (not e100)))
(let ((e111 (and e91 e25)))
(let ((e112 (or e24 e105)))
(let ((e113 (= e31 e89)))
(let ((e114 (=> e102 e62)))
(let ((e115 (ite e36 e39 e111)))
(let ((e116 (= e47 e72)))
(let ((e117 (=> e59 e29)))
(let ((e118 (= e74 e83)))
(let ((e119 (=> e109 e109)))
(let ((e120 (xor e118 e97)))
(let ((e121 (and e112 e103)))
(let ((e122 (and e41 e115)))
(let ((e123 (ite e98 e106 e69)))
(let ((e124 (xor e53 e110)))
(let ((e125 (=> e77 e57)))
(let ((e126 (not e125)))
(let ((e127 (not e60)))
(let ((e128 (xor e123 e116)))
(let ((e129 (and e127 e80)))
(let ((e130 (or e114 e76)))
(let ((e131 (= e108 e108)))
(let ((e132 (and e119 e124)))
(let ((e133 (and e130 e99)))
(let ((e134 (or e121 e67)))
(let ((e135 (or e34 e132)))
(let ((e136 (ite e90 e88 e88)))
(let ((e137 (not e122)))
(let ((e138 (and e136 e113)))
(let ((e139 (and e79 e30)))
(let ((e140 (xor e131 e129)))
(let ((e141 (ite e139 e43 e134)))
(let ((e142 (=> e133 e138)))
(let ((e143 (ite e117 e142 e38)))
(let ((e144 (ite e120 e135 e45)))
(let ((e145 (and e137 e137)))
(let ((e146 (xor e144 e126)))
(let ((e147 (xor e145 e141)))
(let ((e148 (xor e128 e140)))
(let ((e149 (= e146 e148)))
(let ((e150 (and e147 e149)))
(let ((e151 (and e143 e143)))
(let ((e152 (= e151 e150)))
(let ((e153 (and e152 (not (= v1 (_ bv0 8))))))
(let ((e154 (and e153 (not (= v0 (_ bv0 3))))))
e154
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
