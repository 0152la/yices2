(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFBV)
(declare-fun f0 ( (_ BitVec 12) (_ BitVec 15) (_ BitVec 10)) (_ BitVec 9))
(declare-fun p0 ( (_ BitVec 11) (_ BitVec 5)) Bool)
(declare-fun p1 ( (_ BitVec 10) (_ BitVec 3)) Bool)
(declare-fun v0 () (_ BitVec 6))
(assert (let ((e1(_ bv3 2)))
(let ((e2(_ bv1753 13)))
(let ((e3 (f0 ((_ zero_extend 10) e1) ((_ sign_extend 13) e1) ((_ zero_extend 4) v0))))
(let ((e4 (ite (p0 ((_ zero_extend 2) e3) ((_ extract 4 0) e3)) (_ bv1 1) (_ bv0 1))))
(let ((e5 (ite (p1 ((_ zero_extend 8) e1) ((_ extract 2 0) v0)) (_ bv1 1) (_ bv0 1))))
(let ((e6 (ite (= (_ bv1 1) ((_ extract 0 0) e5)) e1 ((_ zero_extend 1) e5))))
(let ((e7 (bvlshr e1 ((_ sign_extend 1) e5))))
(let ((e8 (ite (bvule ((_ sign_extend 4) e7) v0) (_ bv1 1) (_ bv0 1))))
(let ((e9 (bvnor v0 ((_ zero_extend 4) e6))))
(let ((e10 (bvxor ((_ zero_extend 11) e7) e2)))
(let ((e11 (bvsgt ((_ sign_extend 12) e5) e2)))
(let ((e12 (bvule e9 ((_ zero_extend 5) e5))))
(let ((e13 (p0 ((_ zero_extend 5) e9) ((_ sign_extend 3) e7))))
(let ((e14 (p0 ((_ sign_extend 10) e5) ((_ extract 6 2) e3))))
(let ((e15 (p0 ((_ extract 11 1) e2) ((_ sign_extend 3) e6))))
(let ((e16 (bvult e10 ((_ zero_extend 11) e1))))
(let ((e17 (p1 ((_ sign_extend 4) v0) ((_ extract 5 3) e9))))
(let ((e18 (bvuge e6 e6)))
(let ((e19 (bvugt ((_ sign_extend 7) e6) e3)))
(let ((e20 (p1 ((_ sign_extend 8) e7) ((_ sign_extend 2) e4))))
(let ((e21 (bvsle e1 e7)))
(let ((e22 (distinct e9 ((_ zero_extend 4) e1))))
(let ((e23 (= e7 ((_ sign_extend 1) e8))))
(let ((e24 (ite e19 e12 e18)))
(let ((e25 (=> e23 e17)))
(let ((e26 (xor e11 e24)))
(let ((e27 (xor e21 e21)))
(let ((e28 (=> e16 e15)))
(let ((e29 (= e22 e22)))
(let ((e30 (= e28 e27)))
(let ((e31 (xor e13 e25)))
(let ((e32 (xor e30 e26)))
(let ((e33 (and e32 e20)))
(let ((e34 (not e31)))
(let ((e35 (xor e29 e14)))
(let ((e36 (and e33 e33)))
(let ((e37 (= e36 e35)))
(let ((e38 (=> e34 e37)))
e38
)))))))))))))))))))))))))))))))))))))))

(check-sat)
