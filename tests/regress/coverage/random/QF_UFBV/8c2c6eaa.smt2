(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFBV)
(declare-fun f0 ( (_ BitVec 4) (_ BitVec 7) (_ BitVec 12)) (_ BitVec 16))
(declare-fun f1 ( (_ BitVec 8)) (_ BitVec 9))
(declare-fun p0 ( (_ BitVec 4) (_ BitVec 16) (_ BitVec 15)) Bool)
(declare-fun p1 ( (_ BitVec 15) (_ BitVec 8) (_ BitVec 15)) Bool)
(declare-fun v0 () (_ BitVec 7))
(declare-fun v1 () (_ BitVec 11))
(declare-fun v2 () (_ BitVec 2))
(declare-fun v3 () (_ BitVec 4))
(assert (let ((e4(_ bv5 5)))
(let ((e5(_ bv1822 11)))
(let ((e6 (ite (= (_ bv1 1) ((_ extract 0 0) v2)) ((_ sign_extend 9) v2) e5)))
(let ((e7 (f0 ((_ extract 8 5) e5) v0 ((_ zero_extend 1) v1))))
(let ((e8 (f1 ((_ zero_extend 4) v3))))
(let ((e9 (bvsrem ((_ zero_extend 12) v3) e7)))
(let ((e10 (ite (p0 ((_ extract 6 3) v0) ((_ sign_extend 14) v2) ((_ zero_extend 13) v2)) (_ bv1 1) (_ bv0 1))))
(let ((e11 (ite (p1 ((_ zero_extend 4) v1) ((_ extract 7 0) e6) ((_ extract 14 0) e9)) (_ bv1 1) (_ bv0 1))))
(let ((e12 (bvashr e7 ((_ sign_extend 9) v0))))
(let ((e13 ((_ rotate_right 0) e8)))
(let ((e14 (ite (bvslt ((_ zero_extend 7) e8) e12) (_ bv1 1) (_ bv0 1))))
(let ((e15 (bvnor v1 v1)))
(let ((e16 (bvor e13 ((_ zero_extend 7) v2))))
(let ((e17 ((_ rotate_right 0) e14)))
(let ((e18 (bvcomp ((_ sign_extend 10) e17) e6)))
(let ((e19 (ite (bvsge ((_ sign_extend 5) v1) e12) (_ bv1 1) (_ bv0 1))))
(let ((e20 (ite (bvugt e7 e9) (_ bv1 1) (_ bv0 1))))
(let ((e21 ((_ extract 7 3) e16)))
(let ((e22 ((_ repeat 1) e21)))
(let ((e23 (ite (bvsge e8 ((_ sign_extend 8) e14)) (_ bv1 1) (_ bv0 1))))
(let ((e24 (bvneg e9)))
(let ((e25 (ite (distinct e4 ((_ sign_extend 4) e17)) (_ bv1 1) (_ bv0 1))))
(let ((e26 (p1 ((_ zero_extend 14) e19) ((_ extract 13 6) e24) ((_ sign_extend 6) e13))))
(let ((e27 (p0 ((_ zero_extend 3) e17) ((_ sign_extend 15) e17) ((_ sign_extend 14) e17))))
(let ((e28 (bvslt v1 e5)))
(let ((e29 (bvule v2 ((_ sign_extend 1) e23))))
(let ((e30 (bvugt ((_ sign_extend 11) e21) e9)))
(let ((e31 (p0 ((_ extract 4 1) e21) ((_ sign_extend 15) e10) ((_ zero_extend 6) e13))))
(let ((e32 (p1 ((_ sign_extend 6) e8) ((_ sign_extend 4) v3) ((_ zero_extend 10) e21))))
(let ((e33 (= ((_ sign_extend 4) e17) e22)))
(let ((e34 (= ((_ sign_extend 8) e19) e8)))
(let ((e35 (bvult e7 ((_ zero_extend 15) e19))))
(let ((e36 (bvsgt e19 e17)))
(let ((e37 (bvult e23 e19)))
(let ((e38 (bvsle e8 ((_ zero_extend 8) e20))))
(let ((e39 (p0 ((_ zero_extend 3) e23) ((_ zero_extend 15) e20) ((_ zero_extend 13) v2))))
(let ((e40 (bvult e7 ((_ sign_extend 15) e20))))
(let ((e41 (bvule e21 ((_ zero_extend 4) e20))))
(let ((e42 (bvule e21 ((_ sign_extend 3) v2))))
(let ((e43 (bvsge e6 ((_ zero_extend 10) e17))))
(let ((e44 (distinct e9 ((_ sign_extend 11) e22))))
(let ((e45 (bvule e7 ((_ zero_extend 7) e16))))
(let ((e46 (bvslt e15 e5)))
(let ((e47 (bvule e23 e25)))
(let ((e48 (bvsgt ((_ sign_extend 6) e22) e15)))
(let ((e49 (bvsge v3 ((_ zero_extend 3) e25))))
(let ((e50 (bvslt v1 ((_ zero_extend 10) e20))))
(let ((e51 (bvsle ((_ zero_extend 4) e23) e4)))
(let ((e52 (bvult ((_ zero_extend 4) e23) e21)))
(let ((e53 (bvslt e24 ((_ sign_extend 15) e14))))
(let ((e54 (p0 ((_ extract 4 1) e5) ((_ zero_extend 11) e22) ((_ extract 14 0) e7))))
(let ((e55 (bvule v1 ((_ sign_extend 9) v2))))
(let ((e56 (bvsle e24 e12)))
(let ((e57 (distinct ((_ zero_extend 1) e19) v2)))
(let ((e58 (p1 ((_ sign_extend 14) e19) ((_ extract 8 1) e9) ((_ zero_extend 14) e23))))
(let ((e59 (= ((_ sign_extend 4) e25) e22)))
(let ((e60 (bvugt e19 e10)))
(let ((e61 (bvsgt e10 e25)))
(let ((e62 (bvsge e15 ((_ zero_extend 9) v2))))
(let ((e63 (bvsle ((_ sign_extend 6) e22) v1)))
(let ((e64 (bvuge e6 ((_ zero_extend 10) e10))))
(let ((e65 (bvsge e4 ((_ zero_extend 4) e19))))
(let ((e66 (bvsgt e18 e19)))
(let ((e67 (bvsgt ((_ zero_extend 4) e14) e21)))
(let ((e68 (bvugt ((_ sign_extend 15) e17) e12)))
(let ((e69 (bvsle e8 e16)))
(let ((e70 (distinct e4 ((_ zero_extend 4) e20))))
(let ((e71 (p1 ((_ sign_extend 11) v3) ((_ sign_extend 7) e14) ((_ sign_extend 6) e8))))
(let ((e72 (bvule e9 ((_ zero_extend 15) e10))))
(let ((e73 (bvsgt ((_ zero_extend 11) e22) e9)))
(let ((e74 (= ((_ zero_extend 3) v2) e21)))
(let ((e75 (bvult ((_ sign_extend 5) v2) v0)))
(let ((e76 (= e7 ((_ zero_extend 15) e20))))
(let ((e77 (= e19 e14)))
(let ((e78 (bvuge e25 e11)))
(let ((e79 (=> e43 e26)))
(let ((e80 (=> e38 e79)))
(let ((e81 (and e36 e53)))
(let ((e82 (and e70 e74)))
(let ((e83 (ite e72 e48 e55)))
(let ((e84 (ite e69 e35 e40)))
(let ((e85 (= e28 e32)))
(let ((e86 (= e78 e83)))
(let ((e87 (xor e67 e62)))
(let ((e88 (=> e37 e27)))
(let ((e89 (and e76 e77)))
(let ((e90 (and e47 e47)))
(let ((e91 (or e50 e42)))
(let ((e92 (= e41 e41)))
(let ((e93 (=> e63 e87)))
(let ((e94 (xor e58 e73)))
(let ((e95 (not e61)))
(let ((e96 (and e81 e94)))
(let ((e97 (and e54 e51)))
(let ((e98 (or e95 e97)))
(let ((e99 (and e44 e39)))
(let ((e100 (= e71 e64)))
(let ((e101 (not e46)))
(let ((e102 (or e91 e34)))
(let ((e103 (not e60)))
(let ((e104 (or e65 e101)))
(let ((e105 (=> e84 e45)))
(let ((e106 (xor e90 e59)))
(let ((e107 (ite e99 e30 e66)))
(let ((e108 (= e107 e105)))
(let ((e109 (= e75 e89)))
(let ((e110 (xor e29 e56)))
(let ((e111 (=> e80 e80)))
(let ((e112 (xor e100 e109)))
(let ((e113 (=> e52 e111)))
(let ((e114 (not e86)))
(let ((e115 (= e98 e108)))
(let ((e116 (ite e110 e82 e112)))
(let ((e117 (or e93 e85)))
(let ((e118 (or e113 e116)))
(let ((e119 (= e49 e49)))
(let ((e120 (= e118 e57)))
(let ((e121 (= e117 e88)))
(let ((e122 (and e103 e103)))
(let ((e123 (xor e33 e114)))
(let ((e124 (= e31 e115)))
(let ((e125 (and e124 e123)))
(let ((e126 (not e122)))
(let ((e127 (not e104)))
(let ((e128 (= e127 e120)))
(let ((e129 (xor e119 e121)))
(let ((e130 (xor e68 e125)))
(let ((e131 (ite e92 e102 e92)))
(let ((e132 (xor e130 e106)))
(let ((e133 (= e126 e126)))
(let ((e134 (= e131 e129)))
(let ((e135 (xor e128 e133)))
(let ((e136 (or e96 e135)))
(let ((e137 (and e134 e134)))
(let ((e138 (ite e136 e132 e137)))
(let ((e139 (and e138 (not (= e7 (_ bv0 16))))))
(let ((e140 (and e139 (not (= e7 (bvnot (_ bv0 16)))))))
e140
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
