(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UF)
(declare-sort S0 0)
(declare-sort S1 0)
(declare-sort S2 0)
(declare-fun v0 () S0)
(declare-fun v1 () S1)
(declare-fun v2 () S2)
(declare-fun f0 ( S0) S2)
(declare-fun f1 ( S0 S0 S0) S1)
(declare-fun f2 ( S2) S2)
(declare-fun f3 ( S2 S0 S1) S2)
(declare-fun f4 ( S2 S2 S0) S0)
(declare-fun p0 ( S2 S0) Bool)
(declare-fun p1 ( S0) Bool)
(declare-fun p2 ( S1) Bool)
(declare-fun p3 ( S0) Bool)
(declare-fun p4 ( S1 S2) Bool)
(assert (let ((e3 (f2 v2)))
(let ((e4 (f2 v2)))
(let ((e5 (f0 v0)))
(let ((e6 (f3 e5 v0 v1)))
(let ((e7 (f1 v0 v0 v0)))
(let ((e8 (f3 e5 v0 v1)))
(let ((e9 (f4 e8 e8 v0)))
(let ((e10 (= e5 e8)))
(let ((e11 (p4 e7 e8)))
(let ((e12 (p3 v0)))
(let ((e13 (p2 e7)))
(let ((e14 (p1 e9)))
(let ((e15 (p3 e9)))
(let ((e16 (distinct e3 e6)))
(let ((e17 (distinct v2 e8)))
(let ((e18 (= v1 e7)))
(let ((e19 (= e4 v2)))
(let ((e20 (p3 v0)))
(let ((e21 (p0 v2 e9)))
(let ((e22 (ite e17 e9 v0)))
(let ((e23 (ite e14 e8 e4)))
(let ((e24 (ite e21 e9 v0)))
(let ((e25 (ite e19 e3 e4)))
(let ((e26 (ite e13 e9 e22)))
(let ((e27 (ite e10 e22 e9)))
(let ((e28 (ite e13 e24 v0)))
(let ((e29 (ite e12 e5 e3)))
(let ((e30 (ite e13 e7 e7)))
(let ((e31 (ite e16 v2 e5)))
(let ((e32 (ite e20 e6 v2)))
(let ((e33 (ite e21 v1 v1)))
(let ((e34 (ite e16 e28 e22)))
(let ((e35 (ite e18 e23 e25)))
(let ((e36 (ite e11 e28 e24)))
(let ((e37 (ite e13 e31 e6)))
(let ((e38 (ite e18 e7 e30)))
(let ((e39 (ite e16 e34 v0)))
(let ((e40 (ite e15 e32 e8)))
(let ((e41 (= e4 e25)))
(let ((e42 (= e40 e31)))
(let ((e43 (p0 e23 e27)))
(let ((e44 (p0 e25 e9)))
(let ((e45 (= e30 e38)))
(let ((e46 (p1 e26)))
(let ((e47 (p0 e3 e26)))
(let ((e48 (= e22 e28)))
(let ((e49 (distinct e37 e23)))
(let ((e50 (p3 v0)))
(let ((e51 (p3 e24)))
(let ((e52 (= e39 e27)))
(let ((e53 (distinct e35 e35)))
(let ((e54 (= e7 e33)))
(let ((e55 (p1 e9)))
(let ((e56 (p1 e9)))
(let ((e57 (= v1 e38)))
(let ((e58 (distinct e5 e25)))
(let ((e59 (= e36 e36)))
(let ((e60 (p1 e34)))
(let ((e61 (distinct e8 e25)))
(let ((e62 (p4 v1 e8)))
(let ((e63 (distinct e29 v2)))
(let ((e64 (= e6 e37)))
(let ((e65 (distinct e32 e6)))
(let ((e66 (p2 v1)))
(let ((e67 (=> e20 e16)))
(let ((e68 (xor e51 e51)))
(let ((e69 (= e68 e68)))
(let ((e70 (xor e45 e67)))
(let ((e71 (= e17 e54)))
(let ((e72 (or e19 e55)))
(let ((e73 (ite e44 e52 e60)))
(let ((e74 (xor e15 e72)))
(let ((e75 (= e43 e18)))
(let ((e76 (= e65 e14)))
(let ((e77 (=> e56 e61)))
(let ((e78 (=> e58 e76)))
(let ((e79 (xor e73 e48)))
(let ((e80 (xor e13 e12)))
(let ((e81 (=> e77 e80)))
(let ((e82 (= e49 e21)))
(let ((e83 (or e82 e79)))
(let ((e84 (not e11)))
(let ((e85 (not e78)))
(let ((e86 (and e63 e81)))
(let ((e87 (or e83 e74)))
(let ((e88 (or e57 e84)))
(let ((e89 (=> e46 e69)))
(let ((e90 (xor e85 e70)))
(let ((e91 (not e87)))
(let ((e92 (=> e64 e64)))
(let ((e93 (or e42 e75)))
(let ((e94 (or e90 e86)))
(let ((e95 (xor e92 e89)))
(let ((e96 (=> e93 e71)))
(let ((e97 (ite e53 e95 e41)))
(let ((e98 (not e88)))
(let ((e99 (ite e10 e91 e47)))
(let ((e100 (=> e66 e94)))
(let ((e101 (and e98 e96)))
(let ((e102 (and e62 e100)))
(let ((e103 (and e59 e50)))
(let ((e104 (not e97)))
(let ((e105 (=> e104 e102)))
(let ((e106 (not e105)))
(let ((e107 (=> e99 e103)))
(let ((e108 (or e106 e107)))
(let ((e109 (and e101 e101)))
(let ((e110 (or e109 e109)))
(let ((e111 (and e108 e110)))
e111
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
