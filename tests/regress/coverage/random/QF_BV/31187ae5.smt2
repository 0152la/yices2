(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun v0 () (_ BitVec 7))
(assert (let ((e1(_ bv62 8)))
(let ((e2(_ bv23 6)))
(let ((e3 (ite (bvugt e1 ((_ sign_extend 1) v0)) (_ bv1 1) (_ bv0 1))))
(let ((e4 (bvsub ((_ zero_extend 1) v0) e1)))
(let ((e5 (ite (= (_ bv1 1) ((_ extract 4 4) e4)) e1 e4)))
(let ((e6 (bvurem e1 e4)))
(let ((e7 (ite (distinct e5 e6) (_ bv1 1) (_ bv0 1))))
(let ((e8 (bvand e5 e1)))
(let ((e9 (ite (= ((_ sign_extend 2) e2) e5) (_ bv1 1) (_ bv0 1))))
(let ((e10 (bvugt ((_ zero_extend 1) v0) e8)))
(let ((e11 (bvsge e8 e4)))
(let ((e12 (bvugt e5 ((_ sign_extend 1) v0))))
(let ((e13 (bvult e2 ((_ zero_extend 5) e9))))
(let ((e14 (distinct e8 e4)))
(let ((e15 (bvuge e2 ((_ sign_extend 5) e9))))
(let ((e16 (= e1 e6)))
(let ((e17 (= ((_ zero_extend 7) e3) e8)))
(let ((e18 (bvslt e1 ((_ zero_extend 1) v0))))
(let ((e19 (bvult e1 e1)))
(let ((e20 (bvugt ((_ sign_extend 6) e7) v0)))
(let ((e21 (=> e10 e14)))
(let ((e22 (and e17 e21)))
(let ((e23 (= e16 e16)))
(let ((e24 (ite e13 e11 e18)))
(let ((e25 (and e24 e22)))
(let ((e26 (=> e15 e23)))
(let ((e27 (or e20 e19)))
(let ((e28 (or e12 e26)))
(let ((e29 (ite e27 e25 e25)))
(let ((e30 (not e28)))
(let ((e31 (or e29 e30)))
(let ((e32 (and e31 (not (= e4 (_ bv0 8))))))
e32
)))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
