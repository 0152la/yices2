(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_UFIDL)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun f0 ( Int Int) Int)
(declare-fun f1 ( Int Int Int) Int)
(declare-fun p0 ( Int) Bool)
(assert (let ((e2 2))
(let ((e3 0))
(let ((e4 8))
(let ((e5 6))
(let ((e6 (<= v0 v1)))
(let ((e7 (< v0 v0)))
(let ((e8 (distinct v1 v1)))
(let ((e9 (= v1 v1)))
(let ((e10 (<= v1 v0)))
(let ((e11 (= v1 v0)))
(let ((e12 (< v1 v1)))
(let ((e13 (> v0 v0)))
(let ((e14 (distinct v1 v0)))
(let ((e15 (= v1 v0)))
(let ((e16 (< (- v1 v1) (- e3))))
(let ((e17 (> v1 v0)))
(let ((e18 (>= v0 v0)))
(let ((e19 (= (- v0 v0) (- e2))))
(let ((e20 (> (- v0 v0) (- e5))))
(let ((e21 (< v0 v0)))
(let ((e22 (> v0 v0)))
(let ((e23 (distinct (- v0 v0) e2)))
(let ((e24 (<= v0 v1)))
(let ((e25 (distinct v1 v0)))
(let ((e26 (> (- v1 v1) e5)))
(let ((e27 (<= v1 v1)))
(let ((e28 (> (- v0 v0) (- e2))))
(let ((e29 (> v0 v1)))
(let ((e30 (distinct v0 v0)))
(let ((e31 (= v0 v1)))
(let ((e32 (<= v1 v0)))
(let ((e33 (= (- v1 v1) e2)))
(let ((e34 (f1 v0 v0 v0)))
(let ((e35 (f1 e34 e34 e34)))
(let ((e36 (f0 v0 v0)))
(let ((e37 (f0 e35 e36)))
(let ((e38 (f1 e36 e36 v1)))
(let ((e39 (f0 v1 e34)))
(let ((e40 (f1 v1 v1 v1)))
(let ((e41 (p0 e37)))
(let ((e42 (p0 e39)))
(let ((e43 (p0 e35)))
(let ((e44 (p0 e36)))
(let ((e45 (= v1 e35)))
(let ((e46 (p0 e39)))
(let ((e47 (p0 e39)))
(let ((e48 (distinct e35 e35)))
(let ((e49 (p0 e37)))
(let ((e50 (distinct e34 e37)))
(let ((e51 (p0 e40)))
(let ((e52 (p0 e38)))
(let ((e53 (p0 e35)))
(let ((e54 (p0 e34)))
(let ((e55 (p0 e38)))
(let ((e56 (distinct v1 e38)))
(let ((e57 (p0 v1)))
(let ((e58 (p0 v1)))
(let ((e59 (p0 e40)))
(let ((e60 (distinct e40 e40)))
(let ((e61 (= e37 e39)))
(let ((e62 (distinct v0 e34)))
(let ((e63 (p0 e36)))
(let ((e64 (p0 v1)))
(let ((e65 (p0 e37)))
(let ((e66 (= e36 e34)))
(let ((e67 (p0 e37)))
(let ((e68 (p0 v0)))
(let ((e69 (p0 v1)))
(let ((e70 (= e40 v1)))
(let ((e71 (distinct e39 v1)))
(let ((e72 (= v0 v1)))
(let ((e73 (= e34 e39)))
(let ((e74 (p0 e37)))
(let ((e75 (= e38 e38)))
(let ((e76 (distinct v0 e38)))
(let ((e77 (p0 e35)))
(let ((e78 (distinct e36 e37)))
(let ((e79 (distinct e36 v1)))
(let ((e80 (= v0 e34)))
(let ((e81 (> e39 e38)))
(let ((e82 (p0 v1)))
(let ((e83 (p0 v0)))
(let ((e84 (= e36 e34)))
(let ((e85 (> v0 v1)))
(let ((e86 (> e34 e36)))
(let ((e87 (>= v1 e35)))
(let ((e88 (> v1 e38)))
(let ((e89 (distinct e36 v1)))
(let ((e90 (p0 e40)))
(let ((e91 (> e35 e38)))
(let ((e92 (p0 e39)))
(let ((e93 (p0 e34)))
(let ((e94 (< e37 e40)))
(let ((e95 (p0 e37)))
(let ((e96 (distinct e37 v0)))
(let ((e97 (distinct v0 e34)))
(let ((e98 (<= e40 e39)))
(let ((e99 (>= e36 e40)))
(let ((e100 (<= e36 e39)))
(let ((e101 (>= v0 v0)))
(let ((e102 (distinct e37 e39)))
(let ((e103 (>= e37 e36)))
(let ((e104 (p0 e34)))
(let ((e105 (<= e35 e36)))
(let ((e106 (> e37 e36)))
(let ((e107 (> e40 e35)))
(let ((e108 (p0 e38)))
(let ((e109 (>= e38 e34)))
(let ((e110 (<= e35 v1)))
(let ((e111 (or e77 e73)))
(let ((e112 (= e23 e102)))
(let ((e113 (= e56 e68)))
(let ((e114 (ite e84 e74 e85)))
(let ((e115 (or e48 e80)))
(let ((e116 (not e114)))
(let ((e117 (ite e99 e12 e71)))
(let ((e118 (= e70 e96)))
(let ((e119 (or e17 e116)))
(let ((e120 (not e86)))
(let ((e121 (=> e9 e14)))
(let ((e122 (and e83 e59)))
(let ((e123 (= e101 e15)))
(let ((e124 (ite e51 e52 e76)))
(let ((e125 (= e108 e31)))
(let ((e126 (and e87 e41)))
(let ((e127 (=> e66 e49)))
(let ((e128 (not e13)))
(let ((e129 (ite e29 e19 e28)))
(let ((e130 (and e79 e16)))
(let ((e131 (not e117)))
(let ((e132 (or e105 e93)))
(let ((e133 (not e115)))
(let ((e134 (not e130)))
(let ((e135 (= e120 e44)))
(let ((e136 (ite e110 e134 e27)))
(let ((e137 (not e95)))
(let ((e138 (xor e62 e128)))
(let ((e139 (and e82 e88)))
(let ((e140 (not e132)))
(let ((e141 (=> e45 e131)))
(let ((e142 (ite e111 e89 e63)))
(let ((e143 (xor e67 e55)))
(let ((e144 (not e25)))
(let ((e145 (xor e6 e26)))
(let ((e146 (not e139)))
(let ((e147 (= e78 e143)))
(let ((e148 (or e90 e127)))
(let ((e149 (not e112)))
(let ((e150 (or e53 e64)))
(let ((e151 (=> e137 e124)))
(let ((e152 (ite e147 e100 e147)))
(let ((e153 (= e135 e103)))
(let ((e154 (xor e21 e75)))
(let ((e155 (= e118 e54)))
(let ((e156 (or e24 e113)))
(let ((e157 (and e60 e33)))
(let ((e158 (= e141 e156)))
(let ((e159 (ite e126 e61 e91)))
(let ((e160 (or e92 e140)))
(let ((e161 (and e7 e133)))
(let ((e162 (or e42 e69)))
(let ((e163 (or e149 e138)))
(let ((e164 (=> e65 e162)))
(let ((e165 (not e136)))
(let ((e166 (not e123)))
(let ((e167 (and e146 e98)))
(let ((e168 (xor e30 e153)))
(let ((e169 (or e106 e81)))
(let ((e170 (and e11 e119)))
(let ((e171 (xor e8 e154)))
(let ((e172 (not e10)))
(let ((e173 (not e125)))
(let ((e174 (=> e170 e22)))
(let ((e175 (and e144 e107)))
(let ((e176 (ite e158 e158 e172)))
(let ((e177 (ite e121 e152 e160)))
(let ((e178 (not e165)))
(let ((e179 (= e142 e164)))
(let ((e180 (and e46 e155)))
(let ((e181 (=> e43 e50)))
(let ((e182 (ite e20 e18 e168)))
(let ((e183 (and e182 e97)))
(let ((e184 (not e173)))
(let ((e185 (xor e176 e129)))
(let ((e186 (ite e47 e184 e171)))
(let ((e187 (or e150 e186)))
(let ((e188 (not e32)))
(let ((e189 (not e58)))
(let ((e190 (and e161 e72)))
(let ((e191 (and e148 e166)))
(let ((e192 (= e122 e178)))
(let ((e193 (or e151 e167)))
(let ((e194 (ite e163 e191 e179)))
(let ((e195 (ite e159 e174 e194)))
(let ((e196 (ite e181 e188 e180)))
(let ((e197 (xor e183 e192)))
(let ((e198 (ite e185 e195 e197)))
(let ((e199 (= e177 e145)))
(let ((e200 (=> e189 e175)))
(let ((e201 (not e104)))
(let ((e202 (and e196 e57)))
(let ((e203 (and e94 e109)))
(let ((e204 (or e193 e199)))
(let ((e205 (ite e203 e198 e204)))
(let ((e206 (=> e169 e200)))
(let ((e207 (or e157 e202)))
(let ((e208 (and e201 e206)))
(let ((e209 (ite e187 e205 e208)))
(let ((e210 (ite e209 e209 e209)))
(let ((e211 (=> e207 e210)))
(let ((e212 (not e211)))
(let ((e213 (not e212)))
(let ((e214 (= e190 e213)))
e214
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
