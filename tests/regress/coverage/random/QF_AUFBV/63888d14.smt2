(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 13))
(declare-fun v1 () (_ BitVec 5))
(declare-fun v2 () (_ BitVec 15))
(declare-fun v3 () (_ BitVec 10))
(declare-fun v4 () (_ BitVec 7))
(declare-fun a5 () (Array  (_ BitVec 16)  (_ BitVec 2)))
(declare-fun a6 () (Array  (_ BitVec 13)  (_ BitVec 3)))
(assert (let ((e7(_ bv23 5)))
(let ((e8 (bvneg e7)))
(let ((e9 (ite (bvslt v2 ((_ zero_extend 10) e8)) (_ bv1 1) (_ bv0 1))))
(let ((e10 (bvsub v4 ((_ zero_extend 2) e8))))
(let ((e11 ((_ zero_extend 0) v0)))
(let ((e12 (bvxnor ((_ sign_extend 5) v1) v3)))
(let ((e13 (store a5 ((_ zero_extend 15) e9) ((_ extract 2 1) e8))))
(let ((e14 (store a6 v0 ((_ extract 4 2) v4))))
(let ((e15 (select a5 ((_ zero_extend 11) v1))))
(let ((e16 (store a6 ((_ sign_extend 11) e15) ((_ zero_extend 2) e9))))
(let ((e17 (select a6 e11)))
(let ((e18 (bvlshr e10 ((_ sign_extend 2) e8))))
(let ((e19 (ite (bvsgt e12 ((_ zero_extend 5) e7)) (_ bv1 1) (_ bv0 1))))
(let ((e20 ((_ zero_extend 3) e9)))
(let ((e21 (bvsub ((_ zero_extend 5) e15) e10)))
(let ((e22 ((_ rotate_left 2) e17)))
(let ((e23 (bvadd v0 ((_ sign_extend 12) e9))))
(let ((e24 ((_ zero_extend 3) v1)))
(let ((e25 ((_ repeat 1) v4)))
(let ((e26 (ite (bvsgt e11 ((_ zero_extend 12) e19)) (_ bv1 1) (_ bv0 1))))
(let ((e27 (ite (= (_ bv1 1) ((_ extract 12 12) e23)) e23 e11)))
(let ((e28 (bvshl e21 ((_ zero_extend 2) e7))))
(let ((e29 ((_ sign_extend 8) v4)))
(let ((e30 (bvand ((_ sign_extend 4) e22) e28)))
(let ((e31 (ite (= (_ bv1 1) ((_ extract 7 7) v3)) e7 ((_ zero_extend 2) e17))))
(let ((e32 (bvxor e10 e21)))
(let ((e33 (ite (bvult v2 ((_ zero_extend 8) e30)) (_ bv1 1) (_ bv0 1))))
(let ((e34 (distinct v3 ((_ sign_extend 8) e15))))
(let ((e35 (distinct e25 ((_ zero_extend 2) v1))))
(let ((e36 (distinct ((_ zero_extend 4) e9) v1)))
(let ((e37 (bvult ((_ zero_extend 3) e33) e20)))
(let ((e38 (bvslt ((_ zero_extend 1) e9) e15)))
(let ((e39 (bvult e11 ((_ zero_extend 8) e7))))
(let ((e40 (bvule ((_ zero_extend 2) e9) e22)))
(let ((e41 (distinct ((_ sign_extend 14) e33) v2)))
(let ((e42 (bvsle e21 ((_ sign_extend 5) e15))))
(let ((e43 (distinct ((_ zero_extend 3) e18) e12)))
(let ((e44 (bvslt e32 ((_ sign_extend 3) e20))))
(let ((e45 (bvugt ((_ zero_extend 6) e32) e23)))
(let ((e46 (bvuge e24 ((_ zero_extend 3) e8))))
(let ((e47 (bvsgt e25 ((_ zero_extend 6) e26))))
(let ((e48 (bvult ((_ sign_extend 3) e18) v3)))
(let ((e49 (bvult e32 e25)))
(let ((e50 (bvule e28 ((_ sign_extend 2) e31))))
(let ((e51 (bvugt e30 e30)))
(let ((e52 (bvsle ((_ zero_extend 12) e19) e23)))
(let ((e53 (bvule ((_ sign_extend 2) e9) e22)))
(let ((e54 (bvsge ((_ sign_extend 12) e26) e23)))
(let ((e55 (distinct ((_ sign_extend 12) e22) e29)))
(let ((e56 (bvsgt ((_ zero_extend 14) e33) v2)))
(let ((e57 (bvsgt ((_ sign_extend 10) e31) e29)))
(let ((e58 (bvsle ((_ zero_extend 4) e17) v4)))
(let ((e59 (bvult e11 ((_ zero_extend 10) e17))))
(let ((e60 (bvuge e22 ((_ sign_extend 2) e26))))
(let ((e61 (distinct e22 e22)))
(let ((e62 (= e12 ((_ sign_extend 9) e19))))
(let ((e63 (bvule e33 e9)))
(let ((e64 (bvuge ((_ sign_extend 7) e17) e12)))
(let ((e65 (bvslt ((_ zero_extend 3) e20) e10)))
(let ((e66 (bvsgt e25 e18)))
(let ((e67 (bvsle e19 e9)))
(let ((e68 (bvsgt e10 ((_ zero_extend 6) e33))))
(let ((e69 (bvuge ((_ zero_extend 8) e7) e23)))
(let ((e70 (bvuge e28 ((_ zero_extend 2) e8))))
(let ((e71 (bvuge v4 ((_ sign_extend 2) e31))))
(let ((e72 (distinct ((_ sign_extend 2) e11) e29)))
(let ((e73 (= e10 ((_ zero_extend 6) e26))))
(let ((e74 (bvuge e12 ((_ zero_extend 5) e8))))
(let ((e75 (bvult v2 ((_ sign_extend 14) e33))))
(let ((e76 (bvsge e18 ((_ zero_extend 4) e17))))
(let ((e77 (bvslt v3 e12)))
(let ((e78 (bvult v0 ((_ zero_extend 6) e32))))
(let ((e79 (bvsge ((_ sign_extend 4) e33) e7)))
(let ((e80 (bvule e7 e31)))
(let ((e81 (bvuge e11 v0)))
(let ((e82 (bvsle e9 e26)))
(let ((e83 (bvsgt ((_ zero_extend 3) e32) v3)))
(let ((e84 (bvsgt v2 ((_ sign_extend 10) e7))))
(let ((e85 (bvugt ((_ zero_extend 4) e17) e32)))
(let ((e86 (bvslt e28 e10)))
(let ((e87 (bvsle v4 ((_ sign_extend 6) e19))))
(let ((e88 (bvult e28 ((_ sign_extend 3) e20))))
(let ((e89 (bvuge ((_ sign_extend 12) e9) e11)))
(let ((e90 (distinct e29 ((_ sign_extend 10) e31))))
(let ((e91 (bvugt ((_ sign_extend 6) e26) v4)))
(let ((e92 (bvsgt e18 ((_ zero_extend 3) e20))))
(let ((e93 (bvuge ((_ zero_extend 6) e9) e10)))
(let ((e94 (bvsgt ((_ zero_extend 3) v3) e27)))
(let ((e95 (and e83 e49)))
(let ((e96 (or e94 e90)))
(let ((e97 (=> e44 e80)))
(let ((e98 (ite e92 e51 e52)))
(let ((e99 (not e47)))
(let ((e100 (and e85 e65)))
(let ((e101 (=> e71 e81)))
(let ((e102 (xor e41 e54)))
(let ((e103 (xor e58 e63)))
(let ((e104 (ite e39 e100 e84)))
(let ((e105 (= e60 e62)))
(let ((e106 (xor e56 e61)))
(let ((e107 (= e82 e53)))
(let ((e108 (xor e86 e38)))
(let ((e109 (ite e74 e99 e75)))
(let ((e110 (or e105 e43)))
(let ((e111 (not e70)))
(let ((e112 (and e67 e102)))
(let ((e113 (not e104)))
(let ((e114 (ite e98 e45 e109)))
(let ((e115 (xor e103 e96)))
(let ((e116 (= e115 e66)))
(let ((e117 (not e91)))
(let ((e118 (xor e88 e42)))
(let ((e119 (and e114 e55)))
(let ((e120 (=> e108 e46)))
(let ((e121 (not e77)))
(let ((e122 (ite e73 e117 e69)))
(let ((e123 (ite e35 e59 e36)))
(let ((e124 (ite e78 e89 e57)))
(let ((e125 (or e110 e110)))
(let ((e126 (=> e116 e95)))
(let ((e127 (not e64)))
(let ((e128 (and e118 e107)))
(let ((e129 (=> e121 e87)))
(let ((e130 (= e119 e112)))
(let ((e131 (ite e130 e48 e101)))
(let ((e132 (or e111 e40)))
(let ((e133 (or e113 e131)))
(let ((e134 (not e129)))
(let ((e135 (and e132 e120)))
(let ((e136 (xor e106 e68)))
(let ((e137 (not e93)))
(let ((e138 (ite e79 e137 e135)))
(let ((e139 (= e122 e97)))
(let ((e140 (ite e72 e128 e138)))
(let ((e141 (ite e37 e140 e139)))
(let ((e142 (not e34)))
(let ((e143 (not e142)))
(let ((e144 (and e124 e124)))
(let ((e145 (or e136 e133)))
(let ((e146 (and e144 e126)))
(let ((e147 (ite e143 e123 e141)))
(let ((e148 (or e125 e50)))
(let ((e149 (=> e76 e127)))
(let ((e150 (or e145 e148)))
(let ((e151 (and e147 e146)))
(let ((e152 (=> e150 e151)))
(let ((e153 (and e149 e152)))
(let ((e154 (or e153 e153)))
(let ((e155 (and e134 e154)))
e155
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
