(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 8))
(declare-fun v1 () (_ BitVec 16))
(declare-fun v2 () (_ BitVec 9))
(declare-fun a3 () (Array  (_ BitVec 11)  (_ BitVec 5)))
(assert (let ((e4(_ bv694 11)))
(let ((e5 (bvxnor ((_ zero_extend 3) v0) e4)))
(let ((e6 (bvadd ((_ sign_extend 2) v2) e5)))
(let ((e7 (ite (= ((_ zero_extend 2) v2) e4) (_ bv1 1) (_ bv0 1))))
(let ((e8 (bvcomp v1 ((_ sign_extend 5) e4))))
(let ((e9 (store a3 ((_ sign_extend 3) v0) ((_ extract 10 6) e5))))
(let ((e10 (store e9 e6 ((_ sign_extend 4) e7))))
(let ((e11 (select e9 ((_ zero_extend 10) e8))))
(let ((e12 (select e9 ((_ zero_extend 3) v0))))
(let ((e13 (select e10 ((_ sign_extend 2) v2))))
(let ((e14 (store e10 ((_ sign_extend 10) e7) ((_ extract 4 0) v2))))
(let ((e15 (select e10 e6)))
(let ((e16 (select e10 ((_ sign_extend 6) e12))))
(let ((e17 (bvsdiv ((_ sign_extend 10) e7) e6)))
(let ((e18 (ite (= (_ bv1 1) ((_ extract 10 10) e5)) e17 ((_ zero_extend 6) e11))))
(let ((e19 (bvnand e4 ((_ sign_extend 6) e15))))
(let ((e20 ((_ repeat 3) e16)))
(let ((e21 (bvlshr e13 ((_ sign_extend 4) e7))))
(let ((e22 (bvshl ((_ sign_extend 6) e12) e17)))
(let ((e23 (ite (bvuge ((_ sign_extend 8) v0) v1) (_ bv1 1) (_ bv0 1))))
(let ((e24 ((_ repeat 3) e15)))
(let ((e25 (bvudiv ((_ sign_extend 4) e15) v2)))
(let ((e26 (bvnand e4 ((_ zero_extend 6) e21))))
(let ((e27 ((_ extract 8 2) e19)))
(let ((e28 (bvsdiv e13 e12)))
(let ((e29 (bvnot e19)))
(let ((e30 (bvxnor ((_ zero_extend 4) e8) e21)))
(let ((e31 (distinct e22 ((_ sign_extend 6) e15))))
(let ((e32 (bvugt e27 ((_ zero_extend 2) e16))))
(let ((e33 (bvslt e30 e15)))
(let ((e34 (bvsge e21 ((_ sign_extend 4) e7))))
(let ((e35 (distinct ((_ sign_extend 6) e11) e26)))
(let ((e36 (= e24 ((_ sign_extend 10) e21))))
(let ((e37 (bvuge ((_ sign_extend 2) v2) e4)))
(let ((e38 (distinct e6 ((_ zero_extend 10) e23))))
(let ((e39 (bvuge ((_ sign_extend 6) e21) e17)))
(let ((e40 (bvsge e4 e4)))
(let ((e41 (bvule ((_ zero_extend 5) e5) v1)))
(let ((e42 (bvuge ((_ zero_extend 3) e13) v0)))
(let ((e43 (distinct e5 ((_ sign_extend 2) e25))))
(let ((e44 (bvuge ((_ sign_extend 5) e19) v1)))
(let ((e45 (distinct e21 e21)))
(let ((e46 (= ((_ zero_extend 8) e8) v2)))
(let ((e47 (= ((_ sign_extend 2) v2) e18)))
(let ((e48 (bvugt ((_ zero_extend 4) e27) e5)))
(let ((e49 (= ((_ zero_extend 4) e30) e25)))
(let ((e50 (bvslt e20 ((_ sign_extend 14) e7))))
(let ((e51 (bvsgt e4 e26)))
(let ((e52 (bvsge e16 ((_ sign_extend 4) e7))))
(let ((e53 (= ((_ zero_extend 10) e8) e18)))
(let ((e54 (bvuge e6 e19)))
(let ((e55 (bvuge ((_ zero_extend 5) e6) v1)))
(let ((e56 (bvsle e25 ((_ sign_extend 8) e23))))
(let ((e57 (bvuge e5 ((_ sign_extend 10) e8))))
(let ((e58 (= e8 e8)))
(let ((e59 (bvsge e6 ((_ zero_extend 10) e23))))
(let ((e60 (bvsle e25 ((_ sign_extend 4) e12))))
(let ((e61 (bvugt ((_ sign_extend 4) e11) v2)))
(let ((e62 (bvuge ((_ zero_extend 4) e18) e24)))
(let ((e63 (distinct e29 ((_ sign_extend 6) e15))))
(let ((e64 (= e17 ((_ sign_extend 6) e11))))
(let ((e65 (bvult ((_ zero_extend 6) v2) e24)))
(let ((e66 (bvsle ((_ sign_extend 9) e27) v1)))
(let ((e67 (bvugt ((_ zero_extend 4) e15) e25)))
(let ((e68 (= e20 ((_ zero_extend 4) e26))))
(let ((e69 (bvule e8 e8)))
(let ((e70 (= ((_ sign_extend 4) e23) e16)))
(let ((e71 (bvsge e20 ((_ zero_extend 4) e4))))
(let ((e72 (bvugt e6 e19)))
(let ((e73 (= e6 ((_ zero_extend 6) e13))))
(let ((e74 (bvslt e16 e12)))
(let ((e75 (bvugt e29 ((_ sign_extend 3) v0))))
(let ((e76 (= v1 ((_ sign_extend 5) e19))))
(let ((e77 (bvule e18 ((_ zero_extend 4) e27))))
(let ((e78 (distinct e22 e29)))
(let ((e79 (= e20 ((_ zero_extend 4) e26))))
(let ((e80 (bvuge ((_ zero_extend 10) e23) e17)))
(let ((e81 (distinct ((_ zero_extend 11) e15) v1)))
(let ((e82 (bvsge e28 e30)))
(let ((e83 (xor e46 e47)))
(let ((e84 (and e68 e42)))
(let ((e85 (ite e61 e36 e53)))
(let ((e86 (and e72 e41)))
(let ((e87 (=> e51 e60)))
(let ((e88 (not e49)))
(let ((e89 (xor e35 e67)))
(let ((e90 (and e40 e50)))
(let ((e91 (and e62 e79)))
(let ((e92 (ite e71 e58 e44)))
(let ((e93 (= e66 e87)))
(let ((e94 (xor e54 e39)))
(let ((e95 (or e31 e83)))
(let ((e96 (ite e77 e48 e94)))
(let ((e97 (and e65 e32)))
(let ((e98 (=> e64 e88)))
(let ((e99 (= e97 e33)))
(let ((e100 (xor e43 e96)))
(let ((e101 (xor e75 e80)))
(let ((e102 (xor e69 e37)))
(let ((e103 (ite e55 e55 e93)))
(let ((e104 (or e84 e82)))
(let ((e105 (and e78 e90)))
(let ((e106 (not e101)))
(let ((e107 (=> e86 e76)))
(let ((e108 (and e98 e70)))
(let ((e109 (not e99)))
(let ((e110 (= e104 e63)))
(let ((e111 (= e108 e73)))
(let ((e112 (xor e107 e95)))
(let ((e113 (=> e59 e34)))
(let ((e114 (xor e85 e91)))
(let ((e115 (= e56 e109)))
(let ((e116 (or e114 e74)))
(let ((e117 (and e100 e115)))
(let ((e118 (and e81 e113)))
(let ((e119 (=> e102 e52)))
(let ((e120 (ite e103 e57 e119)))
(let ((e121 (=> e116 e116)))
(let ((e122 (= e92 e105)))
(let ((e123 (= e110 e122)))
(let ((e124 (xor e118 e121)))
(let ((e125 (and e106 e123)))
(let ((e126 (= e125 e112)))
(let ((e127 (= e120 e117)))
(let ((e128 (= e38 e127)))
(let ((e129 (=> e124 e89)))
(let ((e130 (ite e111 e126 e126)))
(let ((e131 (and e128 e128)))
(let ((e132 (and e45 e131)))
(let ((e133 (not e130)))
(let ((e134 (xor e133 e132)))
(let ((e135 (not e134)))
(let ((e136 (and e135 e129)))
(let ((e137 (and e136 (not (= v2 (_ bv0 9))))))
(let ((e138 (and e137 (not (= e6 (_ bv0 11))))))
(let ((e139 (and e138 (not (= e6 (bvnot (_ bv0 11)))))))
(let ((e140 (and e139 (not (= e12 (_ bv0 5))))))
(let ((e141 (and e140 (not (= e12 (bvnot (_ bv0 5)))))))
e141
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
