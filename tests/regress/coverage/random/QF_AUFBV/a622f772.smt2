(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 4))
(declare-fun a1 () (Array  (_ BitVec 10)  (_ BitVec 9)))
(declare-fun a2 () (Array  (_ BitVec 16)  (_ BitVec 14)))
(assert (let ((e3(_ bv468 10)))
(let ((e4 (ite (bvule e3 ((_ zero_extend 6) v0)) (_ bv1 1) (_ bv0 1))))
(let ((e5 (select a2 ((_ zero_extend 6) e3))))
(let ((e6 (bvsub ((_ sign_extend 10) v0) e5)))
(let ((e7 (bvxnor e4 e4)))
(let ((e8 (bvurem ((_ zero_extend 6) v0) e3)))
(let ((e9 (bvule e6 ((_ zero_extend 13) e4))))
(let ((e10 (= e8 ((_ zero_extend 6) v0))))
(let ((e11 (bvult ((_ sign_extend 10) v0) e6)))
(let ((e12 (distinct e6 e6)))
(let ((e13 (bvslt ((_ sign_extend 3) e4) v0)))
(let ((e14 (bvult ((_ sign_extend 6) v0) e3)))
(let ((e15 (bvule e3 ((_ sign_extend 6) v0))))
(let ((e16 (bvule e3 e3)))
(let ((e17 (distinct ((_ zero_extend 6) v0) e8)))
(let ((e18 (bvsgt e5 ((_ zero_extend 4) e8))))
(let ((e19 (bvule ((_ sign_extend 10) v0) e6)))
(let ((e20 (distinct e6 ((_ sign_extend 13) e7))))
(let ((e21 (ite e18 e19 e10)))
(let ((e22 (=> e12 e17)))
(let ((e23 (=> e13 e15)))
(let ((e24 (or e11 e20)))
(let ((e25 (xor e23 e21)))
(let ((e26 (xor e25 e25)))
(let ((e27 (= e14 e22)))
(let ((e28 (= e26 e16)))
(let ((e29 (and e24 e9)))
(let ((e30 (and e28 e27)))
(let ((e31 (and e30 e30)))
(let ((e32 (xor e31 e29)))
(let ((e33 (and e32 (not (= e3 (_ bv0 10))))))
e33
))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
