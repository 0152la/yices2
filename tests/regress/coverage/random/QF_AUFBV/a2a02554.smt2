(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 1))
(declare-fun a1 () (Array  (_ BitVec 8)  (_ BitVec 11)))
(declare-fun a2 () (Array  (_ BitVec 12)  (_ BitVec 16)))
(declare-fun a3 () (Array  (_ BitVec 13)  (_ BitVec 11)))
(assert (let ((e4(_ bv1141 12)))
(let ((e5 ((_ repeat 1) e4)))
(let ((e6 (bvsrem ((_ sign_extend 11) v0) e4)))
(let ((e7 (store a2 e6 ((_ sign_extend 4) e4))))
(let ((e8 (select e7 e5)))
(let ((e9 (bvadd e8 ((_ sign_extend 4) e4))))
(let ((e10 (bvshl e9 ((_ sign_extend 4) e5))))
(let ((e11 (bvnot v0)))
(let ((e12 (bvsrem ((_ sign_extend 4) e6) e9)))
(let ((e13 (bvslt e8 e10)))
(let ((e14 (bvsle ((_ zero_extend 4) e6) e9)))
(let ((e15 (= e9 e9)))
(let ((e16 (distinct e10 ((_ sign_extend 15) e11))))
(let ((e17 (bvult ((_ sign_extend 15) v0) e12)))
(let ((e18 (bvugt e5 ((_ sign_extend 11) e11))))
(let ((e19 (bvult ((_ zero_extend 4) e4) e12)))
(let ((e20 (xor e17 e19)))
(let ((e21 (xor e15 e16)))
(let ((e22 (xor e13 e14)))
(let ((e23 (and e20 e21)))
(let ((e24 (not e23)))
(let ((e25 (= e24 e18)))
(let ((e26 (or e22 e22)))
(let ((e27 (not e25)))
(let ((e28 (or e26 e27)))
(let ((e29 (and e28 (not (= e9 (_ bv0 16))))))
(let ((e30 (and e29 (not (= e9 (bvnot (_ bv0 16)))))))
(let ((e31 (and e30 (not (= e4 (_ bv0 12))))))
(let ((e32 (and e31 (not (= e4 (bvnot (_ bv0 12)))))))
e32
))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
