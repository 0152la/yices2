(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 2))
(declare-fun v1 () (_ BitVec 6))
(declare-fun a2 () (Array  (_ BitVec 7)  (_ BitVec 8)))
(declare-fun a3 () (Array  (_ BitVec 14)  (_ BitVec 11)))
(assert (let ((e4(_ bv25 5)))
(let ((e5 (bvurem v0 v0)))
(let ((e6 (ite (= ((_ zero_extend 4) v0) v1) (_ bv1 1) (_ bv0 1))))
(let ((e7 (bvadd v1 ((_ zero_extend 4) e5))))
(let ((e8 (bvmul e4 ((_ sign_extend 3) e5))))
(let ((e9 (store a3 ((_ sign_extend 9) e8) ((_ sign_extend 6) e4))))
(let ((e10 (store a3 ((_ zero_extend 8) v1) ((_ sign_extend 10) e6))))
(let ((e11 (select a2 ((_ zero_extend 5) v0))))
(let ((e12 (store e10 ((_ zero_extend 8) v1) ((_ sign_extend 9) e5))))
(let ((e13 (store a3 ((_ zero_extend 12) v0) ((_ zero_extend 9) v0))))
(let ((e14 (ite (bvule e11 ((_ sign_extend 2) e7)) (_ bv1 1) (_ bv0 1))))
(let ((e15 (bvand e8 e4)))
(let ((e16 (concat e5 e14)))
(let ((e17 (bvcomp ((_ zero_extend 5) e6) v1)))
(let ((e18 (bvxor e11 ((_ zero_extend 2) e7))))
(let ((e19 (bvsub ((_ sign_extend 4) v0) v1)))
(let ((e20 (bvule e11 ((_ sign_extend 2) e19))))
(let ((e21 (bvule e11 ((_ sign_extend 3) e8))))
(let ((e22 (bvsle ((_ sign_extend 1) e6) e5)))
(let ((e23 (bvslt ((_ zero_extend 1) e15) e19)))
(let ((e24 (bvsgt e18 ((_ sign_extend 6) v0))))
(let ((e25 (bvsle ((_ zero_extend 3) e8) e18)))
(let ((e26 (bvsge e7 ((_ sign_extend 5) e17))))
(let ((e27 (bvugt ((_ sign_extend 5) e17) v1)))
(let ((e28 (bvule ((_ sign_extend 2) e16) e8)))
(let ((e29 (bvult ((_ zero_extend 1) e8) e19)))
(let ((e30 (distinct e15 ((_ zero_extend 4) e17))))
(let ((e31 (bvule v1 ((_ zero_extend 3) e16))))
(let ((e32 (bvule e5 ((_ zero_extend 1) e6))))
(let ((e33 (bvsge e4 ((_ zero_extend 4) e6))))
(let ((e34 (bvuge ((_ zero_extend 1) e14) e5)))
(let ((e35 (or e30 e26)))
(let ((e36 (=> e31 e21)))
(let ((e37 (ite e22 e36 e22)))
(let ((e38 (and e20 e33)))
(let ((e39 (or e24 e23)))
(let ((e40 (and e37 e34)))
(let ((e41 (and e29 e35)))
(let ((e42 (not e38)))
(let ((e43 (and e28 e32)))
(let ((e44 (=> e25 e41)))
(let ((e45 (=> e27 e39)))
(let ((e46 (and e44 e44)))
(let ((e47 (or e43 e42)))
(let ((e48 (xor e40 e40)))
(let ((e49 (not e47)))
(let ((e50 (= e48 e45)))
(let ((e51 (and e46 e50)))
(let ((e52 (or e51 e49)))
(let ((e53 (and e52 (not (= v0 (_ bv0 2))))))
e53
)))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
