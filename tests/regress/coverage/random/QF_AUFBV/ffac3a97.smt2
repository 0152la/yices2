(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 5))
(declare-fun v1 () (_ BitVec 9))
(declare-fun a2 () (Array  (_ BitVec 12)  (_ BitVec 8)))
(declare-fun a3 () (Array  (_ BitVec 13)  (_ BitVec 1)))
(declare-fun a4 () (Array  (_ BitVec 10)  (_ BitVec 15)))
(assert (let ((e5(_ bv116 8)))
(let ((e6(_ bv467 9)))
(let ((e7 (bvshl v1 ((_ sign_extend 4) v0))))
(let ((e8 (bvshl e6 e7)))
(let ((e9 (bvsub ((_ zero_extend 1) e5) e8)))
(let ((e10 (store a2 ((_ zero_extend 3) e7) ((_ extract 7 0) e8))))
(let ((e11 (select e10 ((_ sign_extend 7) v0))))
(let ((e12 (ite (bvult e6 ((_ sign_extend 4) v0)) (_ bv1 1) (_ bv0 1))))
(let ((e13 (bvadd ((_ zero_extend 7) e12) e11)))
(let ((e14 ((_ rotate_left 2) v0)))
(let ((e15 (bvxor v1 e6)))
(let ((e16 (bvxnor e15 v1)))
(let ((e17 ((_ rotate_left 5) e13)))
(let ((e18 ((_ repeat 1) e13)))
(let ((e19 (ite (distinct e9 ((_ zero_extend 1) e11)) (_ bv1 1) (_ bv0 1))))
(let ((e20 (ite (bvult e8 e6) (_ bv1 1) (_ bv0 1))))
(let ((e21 (bvmul e13 e18)))
(let ((e22 (bvadd e14 ((_ sign_extend 4) e20))))
(let ((e23 ((_ rotate_right 0) v0)))
(let ((e24 (bvxnor e5 e17)))
(let ((e25 (bvneg e7)))
(let ((e26 (distinct e15 ((_ zero_extend 4) e23))))
(let ((e27 (bvsge e24 ((_ sign_extend 7) e12))))
(let ((e28 (bvsge ((_ zero_extend 1) e11) e15)))
(let ((e29 (bvsgt ((_ sign_extend 1) e24) e6)))
(let ((e30 (= e6 ((_ zero_extend 8) e20))))
(let ((e31 (bvult e8 e7)))
(let ((e32 (bvult e16 e9)))
(let ((e33 (= e25 ((_ zero_extend 1) e13))))
(let ((e34 (bvuge e9 ((_ sign_extend 4) e14))))
(let ((e35 (bvuge e9 ((_ sign_extend 8) e19))))
(let ((e36 (= v0 e14)))
(let ((e37 (bvugt ((_ sign_extend 8) e20) e8)))
(let ((e38 (distinct v1 ((_ zero_extend 1) e11))))
(let ((e39 (bvsge e16 v1)))
(let ((e40 (bvugt ((_ sign_extend 7) e20) e13)))
(let ((e41 (bvugt ((_ sign_extend 1) e17) e8)))
(let ((e42 (bvsgt ((_ zero_extend 1) e21) v1)))
(let ((e43 (bvugt ((_ zero_extend 1) e18) e7)))
(let ((e44 (bvsge ((_ zero_extend 3) e14) e21)))
(let ((e45 (bvugt e25 e16)))
(let ((e46 (bvslt e5 e17)))
(let ((e47 (bvslt e15 ((_ zero_extend 1) e13))))
(let ((e48 (= e20 e20)))
(let ((e49 (bvuge e8 ((_ zero_extend 4) e23))))
(let ((e50 (bvsgt e5 e5)))
(let ((e51 (distinct e18 e5)))
(let ((e52 (= e15 e7)))
(let ((e53 (bvugt e16 ((_ zero_extend 1) e24))))
(let ((e54 (distinct e11 e21)))
(let ((e55 (distinct e8 ((_ sign_extend 8) e12))))
(let ((e56 (bvult ((_ zero_extend 4) e14) e16)))
(let ((e57 (bvuge ((_ zero_extend 1) e24) e9)))
(let ((e58 (distinct e13 e21)))
(let ((e59 (bvsle e9 ((_ sign_extend 4) v0))))
(let ((e60 (bvsgt ((_ sign_extend 8) e19) v1)))
(let ((e61 (bvule v1 e7)))
(let ((e62 (distinct e15 e7)))
(let ((e63 (bvule e23 e22)))
(let ((e64 (= e43 e51)))
(let ((e65 (ite e59 e50 e37)))
(let ((e66 (and e54 e39)))
(let ((e67 (xor e31 e42)))
(let ((e68 (and e48 e26)))
(let ((e69 (and e65 e27)))
(let ((e70 (or e35 e53)))
(let ((e71 (ite e67 e32 e49)))
(let ((e72 (not e62)))
(let ((e73 (= e46 e57)))
(let ((e74 (= e68 e69)))
(let ((e75 (= e29 e71)))
(let ((e76 (= e33 e56)))
(let ((e77 (not e34)))
(let ((e78 (xor e45 e58)))
(let ((e79 (not e60)))
(let ((e80 (xor e61 e55)))
(let ((e81 (not e74)))
(let ((e82 (or e75 e66)))
(let ((e83 (or e64 e72)))
(let ((e84 (=> e63 e36)))
(let ((e85 (=> e76 e28)))
(let ((e86 (= e73 e44)))
(let ((e87 (ite e38 e47 e47)))
(let ((e88 (= e70 e85)))
(let ((e89 (or e87 e30)))
(let ((e90 (and e79 e52)))
(let ((e91 (and e89 e82)))
(let ((e92 (or e77 e81)))
(let ((e93 (= e88 e40)))
(let ((e94 (=> e78 e91)))
(let ((e95 (or e92 e80)))
(let ((e96 (not e84)))
(let ((e97 (xor e93 e94)))
(let ((e98 (xor e41 e95)))
(let ((e99 (not e98)))
(let ((e100 (=> e86 e99)))
(let ((e101 (or e96 e83)))
(let ((e102 (=> e101 e100)))
(let ((e103 (or e102 e97)))
(let ((e104 (not e90)))
(let ((e105 (xor e104 e104)))
(let ((e106 (= e105 e103)))
e106
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
