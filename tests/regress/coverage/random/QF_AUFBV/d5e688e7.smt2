(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun v0 () (_ BitVec 6))
(declare-fun v1 () (_ BitVec 13))
(declare-fun v2 () (_ BitVec 3))
(declare-fun v3 () (_ BitVec 9))
(declare-fun v4 () (_ BitVec 12))
(declare-fun a5 () (Array  (_ BitVec 9)  (_ BitVec 13)))
(declare-fun a6 () (Array  (_ BitVec 5)  (_ BitVec 12)))
(assert (let ((e7(_ bv1 2)))
(let ((e8 (bvnor ((_ zero_extend 10) e7) v4)))
(let ((e9 (bvnot v2)))
(let ((e10 (bvcomp ((_ sign_extend 3) e9) v0)))
(let ((e11 (ite (distinct v1 ((_ zero_extend 4) v3)) (_ bv1 1) (_ bv0 1))))
(let ((e12 (select a5 ((_ zero_extend 8) e11))))
(let ((e13 (select a6 ((_ extract 5 1) e12))))
(let ((e14 (ite (bvuge ((_ zero_extend 3) v3) e13) (_ bv1 1) (_ bv0 1))))
(let ((e15 (bvnor ((_ zero_extend 1) e8) e12)))
(let ((e16 (bvor v4 ((_ sign_extend 9) v2))))
(let ((e17 ((_ rotate_left 1) v2)))
(let ((e18 ((_ sign_extend 13) e11)))
(let ((e19 (bvsrem e9 v2)))
(let ((e20 (bvshl ((_ zero_extend 10) e9) v1)))
(let ((e21 ((_ repeat 4) e19)))
(let ((e22 (bvashr e21 v4)))
(let ((e23 (ite (bvule ((_ zero_extend 9) e19) e22) (_ bv1 1) (_ bv0 1))))
(let ((e24 (ite (bvugt ((_ sign_extend 6) v0) e8) (_ bv1 1) (_ bv0 1))))
(let ((e25 (bvashr ((_ sign_extend 4) v3) e15)))
(let ((e26 (ite (bvule e15 e25) (_ bv1 1) (_ bv0 1))))
(let ((e27 (bvsub ((_ sign_extend 3) v3) e21)))
(let ((e28 (concat e24 e19)))
(let ((e29 (ite (bvslt ((_ zero_extend 1) e7) e9) (_ bv1 1) (_ bv0 1))))
(let ((e30 (bvnot e14)))
(let ((e31 (bvudiv ((_ sign_extend 12) e23) e15)))
(let ((e32 (bvxor e31 ((_ sign_extend 1) e22))))
(let ((e33 (bvsdiv ((_ zero_extend 1) e16) e20)))
(let ((e34 (bvneg e10)))
(let ((e35 (bvule v1 ((_ zero_extend 9) e28))))
(let ((e36 (bvsle e13 ((_ zero_extend 11) e11))))
(let ((e37 (bvsge e32 e20)))
(let ((e38 (bvugt e25 ((_ zero_extend 7) v0))))
(let ((e39 (bvslt ((_ zero_extend 3) v3) e13)))
(let ((e40 (bvsle e33 ((_ zero_extend 10) e19))))
(let ((e41 (bvugt ((_ zero_extend 9) e17) e21)))
(let ((e42 (bvsle ((_ sign_extend 3) e26) e28)))
(let ((e43 (bvsgt e16 e8)))
(let ((e44 (bvslt ((_ zero_extend 9) e17) e22)))
(let ((e45 (bvsgt ((_ zero_extend 10) v2) v1)))
(let ((e46 (bvsge e26 e14)))
(let ((e47 (bvsle ((_ zero_extend 2) e29) e17)))
(let ((e48 (bvuge ((_ zero_extend 11) e34) e8)))
(let ((e49 (= ((_ zero_extend 10) e28) e18)))
(let ((e50 (bvuge ((_ sign_extend 6) e17) v3)))
(let ((e51 (bvugt ((_ zero_extend 11) e10) e16)))
(let ((e52 (bvsge ((_ sign_extend 11) e14) e27)))
(let ((e53 (bvule ((_ sign_extend 11) e24) e22)))
(let ((e54 (bvsge e13 ((_ zero_extend 9) e9))))
(let ((e55 (bvuge e12 v1)))
(let ((e56 (= e33 e33)))
(let ((e57 (bvugt ((_ zero_extend 12) e26) e20)))
(let ((e58 (bvsle ((_ sign_extend 10) v2) e32)))
(let ((e59 (bvsle v0 ((_ sign_extend 3) v2))))
(let ((e60 (bvule ((_ zero_extend 1) e16) e25)))
(let ((e61 (bvsge e12 v1)))
(let ((e62 (bvule e12 e31)))
(let ((e63 (bvslt e17 ((_ zero_extend 2) e24))))
(let ((e64 (bvsge v3 ((_ sign_extend 8) e14))))
(let ((e65 (bvslt ((_ zero_extend 12) e30) v1)))
(let ((e66 (distinct e31 ((_ zero_extend 1) e8))))
(let ((e67 (bvule ((_ zero_extend 8) e10) v3)))
(let ((e68 (bvuge e25 e20)))
(let ((e69 (bvsge v1 ((_ sign_extend 12) e23))))
(let ((e70 (bvsgt e31 ((_ sign_extend 12) e29))))
(let ((e71 (bvule ((_ zero_extend 9) v2) e27)))
(let ((e72 (distinct ((_ zero_extend 12) e34) v1)))
(let ((e73 (bvsgt ((_ sign_extend 1) e25) e18)))
(let ((e74 (= e29 e10)))
(let ((e75 (bvugt e31 ((_ sign_extend 10) e9))))
(let ((e76 (bvuge v4 ((_ zero_extend 9) e17))))
(let ((e77 (bvuge e12 ((_ sign_extend 10) e17))))
(let ((e78 (bvugt e21 v4)))
(let ((e79 (bvsgt ((_ sign_extend 1) v4) e32)))
(let ((e80 (distinct ((_ zero_extend 2) e30) e9)))
(let ((e81 (= ((_ sign_extend 1) e21) e25)))
(let ((e82 (= ((_ sign_extend 1) v4) e20)))
(let ((e83 (bvuge e32 ((_ sign_extend 12) e26))))
(let ((e84 (bvsle e33 ((_ zero_extend 1) v4))))
(let ((e85 (bvuge ((_ zero_extend 12) e11) e33)))
(let ((e86 (bvsge ((_ sign_extend 12) e10) e15)))
(let ((e87 (bvugt e24 e23)))
(let ((e88 (bvsge ((_ zero_extend 1) e16) e25)))
(let ((e89 (bvuge ((_ sign_extend 12) e10) e12)))
(let ((e90 (bvsle v1 e31)))
(let ((e91 (bvsgt e8 e21)))
(let ((e92 (bvugt e16 ((_ sign_extend 11) e23))))
(let ((e93 (bvsgt e20 ((_ sign_extend 10) v2))))
(let ((e94 (bvugt e20 v1)))
(let ((e95 (bvule ((_ zero_extend 2) e26) e19)))
(let ((e96 (distinct ((_ zero_extend 13) e26) e18)))
(let ((e97 (distinct e20 ((_ zero_extend 12) e26))))
(let ((e98 (bvuge e31 ((_ zero_extend 11) e7))))
(let ((e99 (not e36)))
(let ((e100 (=> e86 e56)))
(let ((e101 (not e38)))
(let ((e102 (xor e52 e58)))
(let ((e103 (xor e45 e49)))
(let ((e104 (or e54 e66)))
(let ((e105 (not e93)))
(let ((e106 (ite e100 e78 e76)))
(let ((e107 (ite e74 e89 e91)))
(let ((e108 (or e88 e42)))
(let ((e109 (or e71 e72)))
(let ((e110 (not e77)))
(let ((e111 (not e51)))
(let ((e112 (= e111 e101)))
(let ((e113 (not e53)))
(let ((e114 (xor e47 e63)))
(let ((e115 (=> e68 e69)))
(let ((e116 (xor e60 e73)))
(let ((e117 (= e70 e44)))
(let ((e118 (= e64 e79)))
(let ((e119 (not e40)))
(let ((e120 (and e43 e108)))
(let ((e121 (= e55 e35)))
(let ((e122 (xor e90 e117)))
(let ((e123 (or e46 e118)))
(let ((e124 (= e80 e59)))
(let ((e125 (xor e120 e39)))
(let ((e126 (ite e106 e85 e99)))
(let ((e127 (=> e124 e65)))
(let ((e128 (ite e115 e41 e94)))
(let ((e129 (and e62 e109)))
(let ((e130 (=> e81 e95)))
(let ((e131 (= e104 e92)))
(let ((e132 (= e116 e83)))
(let ((e133 (ite e61 e102 e75)))
(let ((e134 (and e127 e67)))
(let ((e135 (or e129 e114)))
(let ((e136 (ite e133 e97 e96)))
(let ((e137 (or e128 e121)))
(let ((e138 (not e137)))
(let ((e139 (and e138 e119)))
(let ((e140 (not e136)))
(let ((e141 (= e131 e113)))
(let ((e142 (ite e98 e50 e125)))
(let ((e143 (=> e82 e105)))
(let ((e144 (ite e103 e112 e48)))
(let ((e145 (xor e130 e141)))
(let ((e146 (or e107 e126)))
(let ((e147 (=> e144 e135)))
(let ((e148 (or e140 e110)))
(let ((e149 (=> e143 e147)))
(let ((e150 (or e145 e148)))
(let ((e151 (ite e149 e150 e149)))
(let ((e152 (= e37 e139)))
(let ((e153 (= e142 e57)))
(let ((e154 (=> e152 e152)))
(let ((e155 (ite e84 e123 e146)))
(let ((e156 (= e154 e151)))
(let ((e157 (=> e134 e156)))
(let ((e158 (or e153 e132)))
(let ((e159 (or e122 e122)))
(let ((e160 (or e157 e158)))
(let ((e161 (ite e87 e159 e155)))
(let ((e162 (and e160 e160)))
(let ((e163 (or e162 e161)))
(let ((e164 (and e163 (not (= e15 (_ bv0 13))))))
(let ((e165 (and e164 (not (= v2 (_ bv0 3))))))
(let ((e166 (and e165 (not (= v2 (bvnot (_ bv0 3)))))))
(let ((e167 (and e166 (not (= e20 (_ bv0 13))))))
(let ((e168 (and e167 (not (= e20 (bvnot (_ bv0 13)))))))
e168
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
