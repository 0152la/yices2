(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_LRA)
(declare-fun v0 () Real)
(assert (let ((e1 1))
(let ((e2 1))
(let ((e3 4))
(let ((e4 (+ v0 v0)))
(let ((e5 (/ e3 e1)))
(let ((e6 (/ e2 (- e3))))
(let ((e7 (< e6 v0)))
(let ((e8 (<= e4 v0)))
(let ((e9 (= e6 e4)))
(let ((e10 (>= e5 v0)))
(let ((e11 (ite e7 e6 v0)))
(let ((e12 (ite e9 e5 e6)))
(let ((e13 (ite e8 e4 e5)))
(let ((e14 (ite e10 v0 e13)))
(let ((e15 (= e12 e6)))
(let ((e16 (> v0 e13)))
(let ((e17 (distinct e4 e5)))
(let ((e18 (>= e11 v0)))
(let ((e19 (>= e4 e11)))
(let ((e20 (> e11 e4)))
(let ((e21 (= e5 e11)))
(let ((e22 (< e12 e5)))
(let ((e23 (>= e5 e6)))
(let ((e24 (< e11 e4)))
(let ((e25 (> e11 e11)))
(let ((e26 (< e12 e12)))
(let ((e27 (distinct e4 e14)))
(let ((e28 (=> e8 e10)))
(let ((e29 (or e21 e19)))
(let ((e30 (or e23 e24)))
(let ((e31 (ite e26 e15 e22)))
(let ((e32 (= e30 e28)))
(let ((e33 (or e16 e29)))
(let ((e34 (or e9 e9)))
(let ((e35 (=> e17 e25)))
(let ((e36 (and e18 e34)))
(let ((e37 (not e20)))
(let ((e38 (=> e33 e33)))
(let ((e39 (not e36)))
(let ((e40 (and e27 e7)))
(let ((e41 (= e37 e32)))
(let ((e42 (ite e40 e39 e41)))
(let ((e43 (or e31 e38)))
(let ((e44 (ite e42 e43 e42)))
(let ((e45 (not e44)))
(let ((e46 (not e45)))
(let ((e47 (and e46 e35)))
e47
))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
