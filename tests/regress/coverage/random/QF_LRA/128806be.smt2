(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_LRA)
(declare-fun v0 () Real)
(assert (let ((e1 1))
(let ((e2 6))
(let ((e3 (* e2 v0)))
(let ((e4 (+ e3 v0)))
(let ((e5 (+ e3 e3)))
(let ((e6 (* e3 e1)))
(let ((e7 (= e3 v0)))
(let ((e8 (>= e3 e5)))
(let ((e9 (= e6 e3)))
(let ((e10 (> e3 e4)))
(let ((e11 (ite e8 e3 e4)))
(let ((e12 (ite e8 e6 e4)))
(let ((e13 (ite e10 e5 v0)))
(let ((e14 (ite e9 e5 e13)))
(let ((e15 (ite e7 e5 e4)))
(let ((e16 (>= e14 e6)))
(let ((e17 (= e14 e13)))
(let ((e18 (< e15 e5)))
(let ((e19 (= e4 e13)))
(let ((e20 (= e14 e4)))
(let ((e21 (< e14 e13)))
(let ((e22 (<= e15 e13)))
(let ((e23 (distinct e12 v0)))
(let ((e24 (= e4 e4)))
(let ((e25 (< e13 e6)))
(let ((e26 (>= e3 e5)))
(let ((e27 (<= e3 e5)))
(let ((e28 (> e6 e5)))
(let ((e29 (distinct e6 e5)))
(let ((e30 (> e11 e6)))
(let ((e31 (= e16 e18)))
(let ((e32 (and e22 e27)))
(let ((e33 (= e24 e30)))
(let ((e34 (ite e21 e25 e28)))
(let ((e35 (= e10 e26)))
(let ((e36 (and e23 e31)))
(let ((e37 (and e29 e29)))
(let ((e38 (ite e37 e32 e35)))
(let ((e39 (= e8 e7)))
(let ((e40 (and e9 e36)))
(let ((e41 (ite e19 e17 e33)))
(let ((e42 (or e41 e39)))
(let ((e43 (= e40 e34)))
(let ((e44 (ite e42 e42 e43)))
(let ((e45 (or e38 e20)))
(let ((e46 (not e44)))
(let ((e47 (not e45)))
(let ((e48 (xor e46 e46)))
(let ((e49 (xor e47 e48)))
e49
))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
