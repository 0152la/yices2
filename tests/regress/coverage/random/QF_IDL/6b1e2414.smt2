(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_IDL)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun v5 () Int)
(declare-fun v6 () Int)
(assert (let ((e7 15))
(let ((e8 10))
(let ((e9 0))
(let ((e10 2))
(let ((e11 0))
(let ((e12 4))
(let ((e13 (distinct v1 v0)))
(let ((e14 (distinct (- v5 v2) e7)))
(let ((e15 (>= (- v3 v1) (- e12))))
(let ((e16 (<= v6 v6)))
(let ((e17 (distinct v4 v0)))
(let ((e18 (> (- v3 v3) e8)))
(let ((e19 (> v5 v2)))
(let ((e20 (< v1 v2)))
(let ((e21 (distinct (- v3 v4) (- e12))))
(let ((e22 (distinct (- v2 v0) (- e10))))
(let ((e23 (<= (- v1 v4) (- e8))))
(let ((e24 (distinct v6 v3)))
(let ((e25 (<= v4 v0)))
(let ((e26 (distinct v4 v3)))
(let ((e27 (= v5 v6)))
(let ((e28 (distinct v6 v5)))
(let ((e29 (< (- v2 v0) e8)))
(let ((e30 (distinct v5 v6)))
(let ((e31 (> v4 v1)))
(let ((e32 (> v4 v3)))
(let ((e33 (> (- v5 v3) e10)))
(let ((e34 (= (- v1 v1) (- e7))))
(let ((e35 (< v3 v3)))
(let ((e36 (> (- v3 v2) e11)))
(let ((e37 (>= v0 v4)))
(let ((e38 (>= v6 v5)))
(let ((e39 (>= v4 v3)))
(let ((e40 (< v0 v1)))
(let ((e41 (> (- v5 v6) e7)))
(let ((e42 (> v0 v0)))
(let ((e43 (distinct v1 v4)))
(let ((e44 (<= (- v1 v5) (- e9))))
(let ((e45 (distinct (- v5 v0) e11)))
(let ((e46 (<= v3 v0)))
(let ((e47 (distinct v5 v4)))
(let ((e48 (>= v1 v6)))
(let ((e49 (= v1 v0)))
(let ((e50 (distinct v0 v5)))
(let ((e51 (<= (- v5 v2) (- e8))))
(let ((e52 (distinct v3 v6)))
(let ((e53 (<= v5 v2)))
(let ((e54 (< v4 v1)))
(let ((e55 (distinct (- v6 v4) (- e11))))
(let ((e56 (and e20 e31)))
(let ((e57 (= e56 e16)))
(let ((e58 (and e53 e51)))
(let ((e59 (= e54 e14)))
(let ((e60 (= e35 e44)))
(let ((e61 (=> e23 e30)))
(let ((e62 (ite e43 e41 e15)))
(let ((e63 (xor e25 e25)))
(let ((e64 (or e21 e55)))
(let ((e65 (not e34)))
(let ((e66 (xor e59 e58)))
(let ((e67 (or e22 e65)))
(let ((e68 (or e36 e37)))
(let ((e69 (or e64 e32)))
(let ((e70 (ite e57 e40 e50)))
(let ((e71 (or e47 e60)))
(let ((e72 (ite e46 e46 e68)))
(let ((e73 (= e17 e27)))
(let ((e74 (not e72)))
(let ((e75 (ite e67 e49 e24)))
(let ((e76 (=> e71 e33)))
(let ((e77 (= e52 e42)))
(let ((e78 (or e18 e39)))
(let ((e79 (and e61 e78)))
(let ((e80 (xor e66 e73)))
(let ((e81 (= e74 e63)))
(let ((e82 (or e77 e77)))
(let ((e83 (and e19 e13)))
(let ((e84 (xor e76 e28)))
(let ((e85 (= e48 e29)))
(let ((e86 (= e79 e62)))
(let ((e87 (and e26 e81)))
(let ((e88 (= e86 e86)))
(let ((e89 (not e85)))
(let ((e90 (xor e87 e82)))
(let ((e91 (and e89 e83)))
(let ((e92 (or e75 e84)))
(let ((e93 (or e90 e45)))
(let ((e94 (xor e80 e92)))
(let ((e95 (or e38 e94)))
(let ((e96 (or e95 e91)))
(let ((e97 (xor e96 e88)))
(let ((e98 (= e69 e70)))
(let ((e99 (= e98 e93)))
(let ((e100 (xor e99 e97)))
e100
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
