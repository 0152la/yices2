(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_IDL)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun v5 () Int)
(declare-fun v6 () Int)
(assert (let ((e7 1))
(let ((e8 2))
(let ((e9 1))
(let ((e10 4))
(let ((e11 2))
(let ((e12 (>= v6 v0)))
(let ((e13 (= v3 v6)))
(let ((e14 (>= v6 v3)))
(let ((e15 (> v6 v0)))
(let ((e16 (= v0 v5)))
(let ((e17 (> v5 v6)))
(let ((e18 (distinct v4 v6)))
(let ((e19 (distinct v6 v4)))
(let ((e20 (>= (- v5 v6) e9)))
(let ((e21 (< (- v5 v2) (- e8))))
(let ((e22 (> (- v4 v6) (- e9))))
(let ((e23 (>= v5 v6)))
(let ((e24 (>= (- v1 v0) e9)))
(let ((e25 (< (- v5 v5) e7)))
(let ((e26 (distinct (- v0 v0) (- e11))))
(let ((e27 (<= v1 v1)))
(let ((e28 (distinct (- v2 v2) e9)))
(let ((e29 (> (- v4 v5) e8)))
(let ((e30 (>= (- v1 v4) e8)))
(let ((e31 (distinct (- v0 v5) (- e7))))
(let ((e32 (> (- v3 v4) e7)))
(let ((e33 (>= v5 v3)))
(let ((e34 (>= v3 v6)))
(let ((e35 (= v3 v4)))
(let ((e36 (distinct (- v3 v4) e9)))
(let ((e37 (< v2 v2)))
(let ((e38 (= v3 v5)))
(let ((e39 (> (- v2 v5) (- e8))))
(let ((e40 (>= v5 v5)))
(let ((e41 (<= (- v6 v5) (- e7))))
(let ((e42 (= (- v5 v5) (- e7))))
(let ((e43 (> v0 v2)))
(let ((e44 (<= v1 v6)))
(let ((e45 (=> e22 e31)))
(let ((e46 (not e27)))
(let ((e47 (or e28 e45)))
(let ((e48 (xor e14 e12)))
(let ((e49 (= e16 e39)))
(let ((e50 (ite e40 e13 e41)))
(let ((e51 (xor e15 e46)))
(let ((e52 (=> e30 e36)))
(let ((e53 (or e35 e47)))
(let ((e54 (not e51)))
(let ((e55 (=> e29 e48)))
(let ((e56 (and e53 e25)))
(let ((e57 (= e33 e49)))
(let ((e58 (=> e20 e57)))
(let ((e59 (and e58 e24)))
(let ((e60 (xor e26 e42)))
(let ((e61 (not e60)))
(let ((e62 (xor e50 e23)))
(let ((e63 (= e62 e21)))
(let ((e64 (and e43 e37)))
(let ((e65 (xor e34 e64)))
(let ((e66 (or e17 e55)))
(let ((e67 (ite e61 e61 e18)))
(let ((e68 (xor e38 e59)))
(let ((e69 (= e54 e65)))
(let ((e70 (= e67 e63)))
(let ((e71 (not e66)))
(let ((e72 (or e56 e19)))
(let ((e73 (ite e71 e69 e44)))
(let ((e74 (= e72 e52)))
(let ((e75 (= e32 e32)))
(let ((e76 (and e70 e70)))
(let ((e77 (and e73 e68)))
(let ((e78 (not e74)))
(let ((e79 (= e76 e77)))
(let ((e80 (ite e79 e79 e75)))
(let ((e81 (and e78 e80)))
e81
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
