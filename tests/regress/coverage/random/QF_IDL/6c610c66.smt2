(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_IDL)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(assert (let ((e3 4))
(let ((e4 0))
(let ((e5 (<= v0 v1)))
(let ((e6 (<= v1 v0)))
(let ((e7 (distinct (- v0 v0) (- e3))))
(let ((e8 (= v0 v1)))
(let ((e9 (>= v1 v1)))
(let ((e10 (> (- v2 v1) e3)))
(let ((e11 (>= v2 v0)))
(let ((e12 (>= (- v0 v0) e4)))
(let ((e13 (>= (- v1 v2) e3)))
(let ((e14 (distinct v2 v2)))
(let ((e15 (<= (- v2 v0) e4)))
(let ((e16 (<= v2 v2)))
(let ((e17 (< v2 v2)))
(let ((e18 (= (- v1 v0) (- e3))))
(let ((e19 (= v1 v0)))
(let ((e20 (xor e11 e9)))
(let ((e21 (=> e7 e5)))
(let ((e22 (ite e12 e17 e6)))
(let ((e23 (ite e13 e14 e16)))
(let ((e24 (xor e23 e23)))
(let ((e25 (= e20 e10)))
(let ((e26 (not e25)))
(let ((e27 (xor e19 e21)))
(let ((e28 (and e27 e27)))
(let ((e29 (or e26 e15)))
(let ((e30 (ite e29 e28 e28)))
(let ((e31 (= e22 e8)))
(let ((e32 (= e24 e30)))
(let ((e33 (and e18 e31)))
(let ((e34 (and e32 e32)))
(let ((e35 (and e34 e33)))
e35
))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
