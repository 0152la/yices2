(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_IDL)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun v5 () Int)
(declare-fun v6 () Int)
(declare-fun v7 () Int)
(assert (let ((e8 4))
(let ((e9 1))
(let ((e10 0))
(let ((e11 (distinct v0 v4)))
(let ((e12 (= v0 v3)))
(let ((e13 (= (- v5 v4) e10)))
(let ((e14 (>= (- v1 v7) (- e8))))
(let ((e15 (distinct v4 v1)))
(let ((e16 (< (- v0 v1) e9)))
(let ((e17 (distinct v6 v0)))
(let ((e18 (<= (- v4 v5) (- e9))))
(let ((e19 (<= v5 v0)))
(let ((e20 (= v5 v4)))
(let ((e21 (distinct (- v2 v0) e9)))
(let ((e22 (>= (- v7 v1) e8)))
(let ((e23 (<= v2 v0)))
(let ((e24 (distinct (- v4 v1) (- e9))))
(let ((e25 (<= v6 v3)))
(let ((e26 (> v3 v4)))
(let ((e27 (distinct v7 v1)))
(let ((e28 (= v5 v0)))
(let ((e29 (>= (- v0 v7) e10)))
(let ((e30 (distinct v2 v0)))
(let ((e31 (>= v1 v5)))
(let ((e32 (<= (- v7 v4) (- e8))))
(let ((e33 (= (- v2 v5) (- e10))))
(let ((e34 (= v7 v1)))
(let ((e35 (>= v7 v6)))
(let ((e36 (= v4 v7)))
(let ((e37 (distinct (- v3 v5) e8)))
(let ((e38 (= (- v3 v5) e8)))
(let ((e39 (<= (- v1 v2) e10)))
(let ((e40 (< v6 v7)))
(let ((e41 (distinct v7 v1)))
(let ((e42 (>= v6 v0)))
(let ((e43 (and e21 e15)))
(let ((e44 (= e12 e32)))
(let ((e45 (=> e26 e33)))
(let ((e46 (ite e13 e18 e44)))
(let ((e47 (= e16 e14)))
(let ((e48 (not e43)))
(let ((e49 (=> e45 e11)))
(let ((e50 (not e47)))
(let ((e51 (not e37)))
(let ((e52 (not e34)))
(let ((e53 (= e29 e46)))
(let ((e54 (xor e20 e42)))
(let ((e55 (ite e31 e19 e40)))
(let ((e56 (=> e28 e39)))
(let ((e57 (not e35)))
(let ((e58 (= e55 e54)))
(let ((e59 (or e52 e52)))
(let ((e60 (= e38 e23)))
(let ((e61 (xor e56 e49)))
(let ((e62 (= e24 e50)))
(let ((e63 (ite e22 e53 e48)))
(let ((e64 (xor e61 e51)))
(let ((e65 (not e41)))
(let ((e66 (= e25 e63)))
(let ((e67 (=> e62 e17)))
(let ((e68 (= e66 e57)))
(let ((e69 (= e65 e27)))
(let ((e70 (not e58)))
(let ((e71 (xor e36 e68)))
(let ((e72 (=> e64 e71)))
(let ((e73 (and e69 e70)))
(let ((e74 (or e67 e30)))
(let ((e75 (=> e73 e59)))
(let ((e76 (and e75 e74)))
(let ((e77 (ite e60 e60 e76)))
(let ((e78 (not e72)))
(let ((e79 (= e78 e78)))
(let ((e80 (or e79 e79)))
(let ((e81 (=> e80 e80)))
(let ((e82 (and e77 e77)))
(let ((e83 (and e81 e81)))
(let ((e84 (xor e83 e82)))
e84
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
