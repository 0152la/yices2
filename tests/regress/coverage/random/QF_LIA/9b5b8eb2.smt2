(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_LIA)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(assert (let ((e3 7))
(let ((e4 (+ v2 v0)))
(let ((e5 (* v0 e3)))
(let ((e6 (+ v1 v2)))
(let ((e7 (> v1 v2)))
(let ((e8 (distinct e6 v2)))
(let ((e9 (<= e4 v1)))
(let ((e10 (>= e5 e5)))
(let ((e11 (> e4 e4)))
(let ((e12 (> v1 e5)))
(let ((e13 (= e5 v0)))
(let ((e14 (ite e9 v0 e5)))
(let ((e15 (ite e12 e6 v0)))
(let ((e16 (ite e7 v2 e5)))
(let ((e17 (ite e12 v1 v2)))
(let ((e18 (ite e10 v1 e17)))
(let ((e19 (ite e13 e4 v1)))
(let ((e20 (ite e11 e4 v2)))
(let ((e21 (ite e9 e15 e6)))
(let ((e22 (ite e8 e14 e19)))
(let ((e23 (= e5 e15)))
(let ((e24 (>= v2 e22)))
(let ((e25 (>= e14 e4)))
(let ((e26 (<= e18 e20)))
(let ((e27 (> e17 e16)))
(let ((e28 (= e18 v1)))
(let ((e29 (= e19 v0)))
(let ((e30 (distinct e15 e15)))
(let ((e31 (= e18 e17)))
(let ((e32 (distinct v2 e4)))
(let ((e33 (distinct e17 e6)))
(let ((e34 (> e20 e19)))
(let ((e35 (<= v0 e5)))
(let ((e36 (< v0 e4)))
(let ((e37 (>= v1 e21)))
(let ((e38 (or e24 e25)))
(let ((e39 (and e36 e27)))
(let ((e40 (and e29 e37)))
(let ((e41 (=> e9 e23)))
(let ((e42 (and e39 e28)))
(let ((e43 (xor e40 e13)))
(let ((e44 (= e12 e7)))
(let ((e45 (= e42 e42)))
(let ((e46 (=> e32 e11)))
(let ((e47 (xor e38 e8)))
(let ((e48 (=> e30 e30)))
(let ((e49 (= e47 e47)))
(let ((e50 (xor e34 e35)))
(let ((e51 (and e46 e10)))
(let ((e52 (=> e26 e43)))
(let ((e53 (not e51)))
(let ((e54 (not e50)))
(let ((e55 (or e41 e49)))
(let ((e56 (not e54)))
(let ((e57 (not e44)))
(let ((e58 (xor e33 e55)))
(let ((e59 (and e58 e57)))
(let ((e60 (and e53 e53)))
(let ((e61 (and e48 e60)))
(let ((e62 (and e31 e45)))
(let ((e63 (xor e59 e62)))
(let ((e64 (not e56)))
(let ((e65 (and e61 e64)))
(let ((e66 (and e65 e63)))
(let ((e67 (xor e66 e52)))
e67
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
