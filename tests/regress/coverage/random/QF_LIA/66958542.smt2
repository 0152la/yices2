(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_LIA)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(assert (let ((e2 5))
(let ((e3 (- v0 v1)))
(let ((e4 (- e3 v1)))
(let ((e5 (- e3 e4)))
(let ((e6 (* e2 e3)))
(let ((e7 (distinct e3 e4)))
(let ((e8 (< v0 e3)))
(let ((e9 (= e3 e6)))
(let ((e10 (>= e6 e3)))
(let ((e11 (< e3 e5)))
(let ((e12 (<= e5 v1)))
(let ((e13 (ite e10 e3 e3)))
(let ((e14 (ite e12 e6 e13)))
(let ((e15 (ite e8 e6 e13)))
(let ((e16 (ite e8 e4 v0)))
(let ((e17 (ite e9 v1 v0)))
(let ((e18 (ite e11 e5 e6)))
(let ((e19 (ite e7 e13 e5)))
(let ((e20 (> e14 e17)))
(let ((e21 (< e15 e6)))
(let ((e22 (= e14 e14)))
(let ((e23 (>= e16 v1)))
(let ((e24 (<= e6 e17)))
(let ((e25 (>= v1 e3)))
(let ((e26 (> e13 e17)))
(let ((e27 (< e15 e13)))
(let ((e28 (> e6 e18)))
(let ((e29 (= e14 e4)))
(let ((e30 (>= v0 e4)))
(let ((e31 (distinct e13 e18)))
(let ((e32 (>= v0 e14)))
(let ((e33 (>= e5 e19)))
(let ((e34 (= e9 e33)))
(let ((e35 (xor e10 e30)))
(let ((e36 (= e20 e32)))
(let ((e37 (= e36 e25)))
(let ((e38 (ite e35 e31 e23)))
(let ((e39 (and e22 e29)))
(let ((e40 (and e24 e24)))
(let ((e41 (=> e40 e12)))
(let ((e42 (not e38)))
(let ((e43 (= e27 e27)))
(let ((e44 (or e34 e8)))
(let ((e45 (not e37)))
(let ((e46 (or e26 e43)))
(let ((e47 (not e44)))
(let ((e48 (or e39 e7)))
(let ((e49 (ite e46 e42 e45)))
(let ((e50 (xor e49 e28)))
(let ((e51 (=> e50 e50)))
(let ((e52 (not e41)))
(let ((e53 (xor e51 e11)))
(let ((e54 (= e48 e52)))
(let ((e55 (= e53 e54)))
(let ((e56 (xor e55 e55)))
(let ((e57 (not e21)))
(let ((e58 (ite e57 e47 e56)))
e58
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
