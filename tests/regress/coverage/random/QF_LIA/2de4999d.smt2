(set-info :source |fuzzsmt|)
(set-info :smt-lib-version 2.0)
(set-info :category "random")
(set-info :status unknown)
(set-logic QF_LIA)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(assert (let ((e3 0))
(let ((e4 (- v1 v2)))
(let ((e5 (* (- e3) e4)))
(let ((e6 (+ v0 v2)))
(let ((e7 (<= v2 e4)))
(let ((e8 (> e4 v0)))
(let ((e9 (distinct v0 e5)))
(let ((e10 (>= v0 v0)))
(let ((e11 (< v1 e6)))
(let ((e12 (ite e9 e5 v1)))
(let ((e13 (ite e10 e6 v2)))
(let ((e14 (ite e11 e4 v1)))
(let ((e15 (ite e8 v0 v1)))
(let ((e16 (ite e7 v0 e6)))
(let ((e17 (> e5 v1)))
(let ((e18 (< v2 e12)))
(let ((e19 (<= v0 v2)))
(let ((e20 (= v1 v0)))
(let ((e21 (>= e16 e5)))
(let ((e22 (= e15 v1)))
(let ((e23 (>= v0 e14)))
(let ((e24 (= e6 e5)))
(let ((e25 (distinct e15 e15)))
(let ((e26 (= v1 v1)))
(let ((e27 (= v0 e12)))
(let ((e28 (> v2 e13)))
(let ((e29 (>= v1 e15)))
(let ((e30 (<= v2 e5)))
(let ((e31 (> v1 e12)))
(let ((e32 (>= e4 e15)))
(let ((e33 (=> e18 e23)))
(let ((e34 (xor e28 e27)))
(let ((e35 (xor e7 e20)))
(let ((e36 (or e33 e11)))
(let ((e37 (or e36 e30)))
(let ((e38 (and e29 e10)))
(let ((e39 (not e9)))
(let ((e40 (or e31 e39)))
(let ((e41 (and e32 e25)))
(let ((e42 (or e38 e21)))
(let ((e43 (=> e22 e41)))
(let ((e44 (xor e8 e34)))
(let ((e45 (not e35)))
(let ((e46 (not e26)))
(let ((e47 (or e44 e44)))
(let ((e48 (= e42 e47)))
(let ((e49 (xor e48 e37)))
(let ((e50 (and e17 e45)))
(let ((e51 (= e50 e49)))
(let ((e52 (=> e51 e51)))
(let ((e53 (ite e24 e19 e40)))
(let ((e54 (ite e53 e53 e52)))
(let ((e55 (and e43 e43)))
(let ((e56 (= e55 e46)))
(let ((e57 (not e54)))
(let ((e58 (or e56 e57)))
e58
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(set-option :regular-output-channel "/dev/null")
(get-model)
