#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>

#include "ackermann_cache.h"

#ifdef MINGW

/*
 * Need some version of random()
 * rand() exists on mingw
 */
static inline int random(void) {
  return rand();
}

#endif


static ack_cache_t cache;

static void print_record(ack_record_t *r) {
  printf("   [%"PRId32", %"PRId32"]: act = %f\n", r->left, r->right, r->activity);
}

static void print_cache(ack_cache_t *cache) {
  uint32_t i, n;

  n = cache->nrecords;
  if (n == 0) {
    printf("   empty\n");
  } else {
    for (i=0; i<n; i++) {
      print_record(cache->data + i);
    }
    printf("\n");
  }
}

static void print_hash_table(ack_cache_t *cache) {
  uint32_t i, n;
  ack_record_t *d;

  n =  cache->hsize;
  for (i=0; i<n; i++) {
    printf("   hash[%"PRId32"]: ", i);
    d = cache->hash[i];
    if (d != NULL) {
      print_record(d);
    } else {
      printf("   NULL\n");
    }
  }
  printf("\n");
}

static void print_cache_details(ack_cache_t *cache) {
  printf("cache %p\n", cache);
  printf("  dsize = %"PRIu32"\n", cache->dsize);
  printf("  hsize = %"PRIu32"\n", cache->hsize);
  printf("  nrecords = %"PRIu32"\n", cache->nrecords);
  printf("  act_increment = %f\n", cache->act_increment);
  printf("  inv_act_decay = %f\n", cache->inv_act_decay);
  printf("  content:\n");
  print_cache(cache);
  printf("  hash table:\n");
  print_hash_table(cache);
}


#define NTESTS 40

static int32_t test_values[40] = {
  01, 12, 23, 34, 45, 56, 67, 78, 89, 90,
  90, 89, 87, 86, 65, 64, 3, 832, 73, 10,
  73, 83, 12, 18, 38, 02, 473, 19, 91, 13,
  10, 10, 23, 36, 47, 79, 17, 53, 35, 19,
};


int main() {
  int32_t a, b;
  uint32_t i, n;
  ack_record_t *d;

  init_ackermann_cache(&cache);
  printf("Initial cache\n");
  print_cache_details(&cache);

  n = 20;
  for (i=0; i<n; i++) {
    a = test_values[2 * i];
    b = test_values[2 * i + 1];
    printf("record(%"PRId32", %"PRId32")\n", a, b);
    ackermann_record(&cache, a, b);
  }

  printf("\nAfter adding 20 records\n");
  print_cache_details(&cache);  

  ackermann_decay_activities(&cache);
  // increase activity of the first six records
  n = 6;
  for (i=0; i<n; i++) {
    a = test_values[2 * i];
    b = test_values[2 * i + 1];
    printf("record(%"PRId32", %"PRId32")\n", a, b);
    ackermann_record(&cache, a, b);
  }
  
  printf("\nAfter adding 6 records\n");
  print_cache_details(&cache);    

  // test of find
  n = 39;
  for (i=0; i<n; i++) {
    a = test_values[i];
    b = test_values[i+1];
    printf("find(%"PRId32", %"PRId32"): ", a, b);
    d = find_ackermann_record(&cache, a, b);
    if (d == NULL) {
      printf("   null\n");
    } else {
      print_record(d);
    }

    printf("find(%"PRId32", %"PRId32"): ", b, a);
    d = find_ackermann_record(&cache, a, b);
    if (d == NULL) {
      printf("   null\n");
    } else {
      print_record(d);
    }
  }
  printf("\n\n");

  // random additions
  for (i=0; i<1000000; i++) {
    a = random() % 100;
    b = random() % 100;
    ackermann_record(&cache, a, b);
    if (random() % 256 < 20) {
      ackermann_decay_activities(&cache);
    }
  }


  printf("\nFinal content\n");
  print_cache_details(&cache);    
  

  delete_ackermann_cache(&cache);

  return 0;
}
