BUILDING GMP FOR YICES
----------------------

As many as three different versions of GMP can be used to build Yices.

1) In release mode, we build an executable and a dynamic yices library
   that are linked with a dynamic GMP library. A compatible GMP library
   must be present on the client's machine to use this release version.

2) In static mode, we build an executable and dynamic yices library
   that are statically linked with libgmp.a. For the executable, a
   standard libgmp.a works. For the dynamic yices library, we need a
   version of libgmp.a that's position-independent code (i.e.,
   compiled with -fPIC). PIC is the default on Windows and relatives
   (cygwin/mingw) so we need only one libgmp.a on these platgorms.

   On linux and MacOS X, the default 'libgmp.a' is typically not PIC
   so we need to build another version.




Building PIC libgmp.a on linux (based on gmp-4.3.2)
---------------------------------------------------

1) 64bit version: 

   ./configure --prefix=/homes/bruno/tools/x86_64-linux/reloc_gmp \
      ABI=64 CFLAGS=-fPIC CPPFLAGS=-DPIC --disable-shared
   make
   make check
   make install

This should work just fine. But the GMP website mentions that
some versions of GCC do not compile GMP properly on 64bit machines.


2) 32bit version: similar but add the flag -m32 to CFLAGS

   ./configure --prefix=/homes/bruno/tools/xi386-linux/reloc_gmp \
      ABI=32 CFLAGS='-fPIC -m32' CPPFLAGS=-DPIC --disable-shared

NOTE: it's important to always built GMP from a clean state, and doing
'make clean' form the GMP source directory does not make it clean enough.
The safest method is to delete the source directory and extract the 
sources from a tarfile every time.




Building GMP on Mac OS X (including PIC)
----------------------------------------

This can be easy or hard depending on the GMP version and GCC compiler
available on Mac OS X.

Here is how to build gmp-4.3.2 on an Intel MacBook running Darwin-9.8.0.
This was done using X-code 3.1.4. 

1) There are two gcc compilers with this X-code version: 

   /usr/bin/gcc     (i686-apple-darwin9-gcc-4.0.1)
   /usr/bin/gcc-4.2 (i686-apple-darwin9-gcc-4.0.1)

The first one can't be used for GMP, so we must give 'CC=gcc-4.2' to
the GMP configure script.



2) GMP for 32bit/PIC/static only

   ./configure --prefix=... 
               CC=gcc-4.2
               ABI=32
               CFLAGS='-fPIC -m32'
               CPPFLAGS=-DPIC 

   
   then compile with 'make'


   'make check' failed

   None of the test programs can be compiled and an error about 
   undefined symbols in 'gmp-4.3.2/tests/.libs/libtests.a' is 
   reported. All test programs require this library.

   These undefined symbols are used by 'x86call.o' and are 
   actually defined in 'x86check.o'. Even though 'x86check.o'
   is present in 'libtests.a', the linker does not find the symbols.

   A work around is to force all test programs to be linked with
   both '.libs/libtests.a' and 'x86check.o'. This can be achieved
   by editing 'gmp-4.3.2/tests/Makefile' and  'gmp-4.3.2/tests/*/Makefile'.

   In gmp-4.3.2/tests/Makefile, search for the line 

     LDADD = libtests.la $(top_builddir)/libgmp.la

   and replace it by
     
     LDADD = libtests.la $(top_builddir)/libgmp.la x86check.o


   In gmp-4.3.2/tests/*/Makefile, search for 

     LDADD = $(top_buiddir)/tests/libtests.la $(top_builddir)/libgmp.la

   and add '$(top_builddir)/tests/x86check.o' at the end of that line.


   After this hack, 'make check' succeeded and 'make install' worked too.



3) GMP for 64bit/PIC/static only

   ./configure --prefix=... 
               CC=gcc-4.2
               ABI=64
               CFLAGS='-fPIC -m64'
               CPPFLAGS=-DPIC 

   make
   make check
   make install

   This worked without problems (but it's critical to do this from a clean
   GMP source directory).

   


4) Building a fat GMP library:

   It's easy to combine the 32bit and the 64bit GMP libraries into
   a 'fat' library.

   rename the 32bit libgmp.a to libgmp-x86.a (or whatever)
   rename the 64bit libgmp.a to libgmp-amd64.a

   then use the 'lipo' utility:

   lipo -create -output libgmp.a libgmp-x86.a libgmp-amd64.a

   This works too for dynamic libraries (to build libgmp.dylib
   from libgmp-x86.dylib and libgmp-amd64.dylib).



   


Building GMP on cygwin or mingw
-------------------------------

On cygwin/mingw/Windows, it's not possible to build both libgmp.a and
the dynamic GMP library at the same time.  Both versions require a
different header file 'gmp.h' so they must be installed in different
locations. 

For compiling Yices, it's best to install a dynamic GMP library + include
file in the default location and to build a separate static GMP library
and install it somewhere else:

1) First, build GMP as a dynamic library in the default location.

   On cygwin, here's what I did.

   From the GMP source directory:

     ./configure --enable-shared --disable-static --prefix=/usr
     make
     make check
     make install     

   The resulting GMP librar(ies) are installed as

     /usr/bin/cyggmp-3.dll    (DLL)
     /usr/lib/libgmp.dll.a    (import library)
     /usr/lib/libgmp.la       (stuff used by libtool)

    + others we don't care about
  
   and the corresponding 'gmp.h' will be
  
     /usr/include/gmp.h


2) Then, build GMP as a static library in a different location (say
   /tools/static_gmp/). This can be done by 

      ./configure --disable-share --enable-static --prefix=/tools/static_gmp 
      make
      make check
      make install

   from the GMP source directory. 

   This will install 

      /tools/static_gmp/lib/libgmp.a
      /tools/static_gmp/include/gmp.h


   To use this static libgmp.a when building Yices, give the following 
   options to the Yices ./configure script:

      --with-static-gmp=/tools/static_gmp/lib/libgmp.a
      --with-static-gmp-include-dir=/tools/static_gmp/include


