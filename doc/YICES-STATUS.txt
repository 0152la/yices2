What Yices should be
====================

A system such as Yices (or any SMT solver) should consist
of two main components:

1) A standalone solver (in the form of a binary executable) that
   take input specifications in the YICES language. This should
   be usable via a textual interface or using files (e.g., as a
   backend of other tools such as SAL or Why).

   Its essential functionalities should include:
   - checking satisfiability
   - producing models
   - support for incremental use (via push/pop/reset).

   Optional features (useful but not necessary):
   - unsat cores
   - proof generation
   - interpolants


2) A library that can be embedded in other tools.

   The library and corresponding API should provide the same
   functionalities as the standalone solver (and possibly more).


In addition, it's good to have another component.

3) A standalone solver that supports the SMT-LIB notation.

   The SMT-LIB language is improving and is becoming quite usable
   beside the competition. It's still a moving target and it sitll has
   some issues, but it's likely to become the defacto standard.
   Many people who use SMT solvers as backends will require support
   for the SMT-LIB notation.

   A solver for SMT-LIB could be the same as the standalone solver
   described unde 1) above, but I'd rather have an independent
   tool that's specialized for SMT-LIB.




Status as of June 3, 2010
=========================

a) SMT-LIB solver: Yices 2 solver that entered SMT-COMP 2009.

   This is fully functional, in the sense that it supports all the
   features required for SMT COMP. It reads specifications written
   in the SMT-LIB 1.2 language and check satisfiability. It also
   produce models (although that's not required for SMT-COMP).

   It can deal with all SMT-LIB logics that do not involve quantifiers
   or non-linear arithmetic. We currently distribute this solver for
   Linux/Windows/Mac OS.


b) Yices 2 standalone solver:

   It exists but it is not complete. It's usable but it does not yet
   support everything that's in the YICES language (e.g., tuples and
   enumeration types). But the most significant missing feature is
   that it does not support push and pop.


c) Library and API:

   It's not complete. The API currently has support for building
   formulas/terms/types. Support for checking formula satisfiability.
   building models, push/pop, etc. is not avaible in this API,






What's missing before we can release
====================================

To release a baseline version of Yices~2 that's usable, we
need to do three things as a minimum:

1) add support for PUSH and POP.

2) complete the API/library and standalone tool.

3) write the documentation.


Of these three, adding support for PUSH/POP is what will require
most work. (Since that will require modification of all existing
Yices components, in particular the bit-vector solver will need
a thorough re-engineering).

Once PUSH/POP is implemented, completing the library and defining
the API should be straightforward.




Other useful things that would be worth doing before a release
==============================================================

1) Add support for the new SMT-LIB language.

   Yices 2 currently supports SMT-LIB 1.2, which is becoming
   obsolete. A more recent SMT-LIB 2 was released earlier this
   year. That's what will be used in the forthcoming SMT competition.

   Supporting SMT-LIB 2 requires much more than what we've seen so far
   from the SMT-LIB people. SMT-LIB 2 has a command language The
   previous SMT-LIB versions were only about writing formulas.

   SMT-LIB 2 requires model generation and PUSH/POP. So this
   can't be done until we have PUSH/POP in Yices 2.


2) Fix the most glaring performance issues.

   In last year's competition, Yices~2 had miserable performance on
   several families of SMT-LIB benchmarks. In one family, we were
   way behind all the other solvers, including CVC3. The reason is
   that we're missing a simplification trick that everybody else
   knows.

   That's bad for us, as people will write paper comparing themselves
   to Yices and they typically use SMT-LIB benchmarks for that. So
   bad performance is bad publicity for us.



Other things that could be considered
-------------------------------------

1) Include support for non-linear arithmetic.

   We've developed a non-linear solver in our NASA Hybrid abstraction
   project. Releasing this as part of Yices 2 would make Ben/NASA happy.

   Issues are:
   - the solver is heuristic and highly incomplete
   - it cannot generate models (or even determine that a formula is
     satisfiable).
   - it's a mix of Allegro Common LISP and C code. So there is additional
     hassle in maintaining and releasing it.




Longer term plans
=================

1) More features:

   - unsat cores

   - proofs or certificates (in whatever format would make sense for
     Shankar's kernel of truth).

   - interpolants


2) Increased expressiveness (deal with more logical theories)

   - deal with quantifiers

   - add full support (or better support) for non-linear arithmetic

   - other theories (floating points, sets, lists, etc.)


3) Improve the YICES language:

   - add support for polymorphic/overloaded functions

