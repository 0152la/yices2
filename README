CONTENT AND DIRECTORY STRUCTURE
-------------------------------

The source subdirectories include

./src:	       source code for Yices proper
./tests:       source code for test programs
./sat_solver:  source code for stand-alone Yices sat solvers
./doc:	       documentation
./examples:    example input files for testing

./distributions: directory where tarfiles are built (for both sources and 
                 binary distributions)

The build subdirectory is organized by platform + compilation mode.
Compilation modes are release, debug, static + others for profiling.


For example, on an intel Mac, there may be three directories below build:

./build/i386-apple-darwin8.9.1-release/
./build/i386-apple-darwin8.9.1-debug/
./build/i386-apple-darwin8.9.1-static/


Each of these directories contains three subdirectories: for object,
libraries, and binaries, e.g., 

./build/i386-apple-darwin8.9.1-release/obj/
./build/i386-apple-darwin8.9.1-release/lib/
./build/i386-apple-darwin8.9.1-release/bin/


This is where all object files, libraries, and binaries are located for
platform 'i386-apple-darwin8.9.1' and compilation mode 'release'.





CONFIGURATION
-------------

Configuration files are generated by ./configure, and are kept
separate for each platform. They are stored in the ./configs
subdirectory, with a name of the form 'make.include.<platform>'.

The rationale for this organization is to support parallel compilation
on several machines from the same source directory (i.e., without
having to run ./configure every time on each machine). Yices 1.0.xx
does not allow this and that's a pain whenever we release a new
version.

The Makefile in the top-level directory determines the architecture
and OS, and checks the compilation mode. The platform is determined
from the architecture and OS and 'make' reads the configuration file
for that platform. This sets five variables that are passed to a
recursive make:

  ARCH=<target-platform>
  POSIXOS=<operating system>
  YICES_TOP_DIR=<top-level directory>
  YICES_MAKE_INCLUDE=<config file to use>
  YICES_MODE=<compilation mode>


To see how these variables are set just type 'make' or 'make MODE=<mode>'. 
For example on a linux/x86_64 platform, typing 'make MODE=debug' gives

  ARCH is x86_64-unknown-linux-gnu
  POSIXOS is linux
  YICES_TOP_DIR is /homes/bruno/yices2
  YICES_MAKE_INCLUDE is configs/make.include.x86_64-unknown-linux-gnu
  YICES_MODE is debug


More variables are set during configuration. For trouble-shooting, you
can see the full list by typing 'make recheck' from the toplevel Yices
directory. In most cases, these variables (CC, LD, etc.) are set to
good default values, but the defaults may be overriden by giving
options to the ./configure script.

Two Yices-specific variables are set at configuration time for dealing
with GMP:

  STATIC_GMP=<path to libgmp.a>
  STATIC_GMP_INCLUDE_DIR=<path to an include directory containing gmp.h>

There's usually no need to play with these variables, except if you
want to build Yices in both 'static' and 'release' modes on Cygwin.




BUILDING YICES USING THE DEFAULT CONFIGURATION
----------------------------------------------

To builds Yices from the source on a new platform:

1) run autoconf

2) run ./configure

   If all goes well, this will produce a configuration file  
   make.include.<platform> in the ./configs directory.   


3) compile using the default mode (same as MODE=release)

   make all

   This produces binaries and libraries with GMP dynamically linked.
   The binaries are in ./build/<platform>-release/bin
   The libraries are in ./build/<platform>-release/lib


4) compile in static mode

   make all MODE=static

   This produces binaries and libraries with GMP statically linked.
   The binaries are in ./build/<platform>-static/bin
   The libraries are in ./build/<platform>-static/lib





USING ALTERNATIVE CONFIGURATIONS
--------------------------------

1) Compiling in 64bits on Mac OS/X

On Mac OS X/intel platforms (at least since version 10.5/Leopard), it
is possible to produce objects/libraries/executables either in
32bit or in 64bit mode. The default is 32bit. 

To override the default, build an alternative configuration file 
for platform 'x86_64-apple-darwin9.x.y' with flag -m64 added to 
CFLAGS to force compilation in 64bits mode. For example

   ./configure --build=x86_64-apple-darwin9.2.2 CFLAGS=-m64

(The version number 2.2 changes with each patch/new version of
Darwin. Adjust this as needed).

To use this configuration, add OPTION=64bits to the command line
when using make. For example

   make all MODE=static OPTION=64bits


The result will be in ./build/x86-64-apple-darwin9.2.2-static/




2) Compiling in 32bits on Linux/x86_64 platforms

On Linux/x86_64 platforms, it may be possible to also compile in 32 bit mode.
This depends on libraries and gcc versions, but it can work. By default the 
makefiles will compile in 64bit mode for this platforms. 

To override this, build an alternative configuration file for the platform
'i686-unknown-linux-gnu'. To force compilation in 32bit modes, add the flag -m32 
to CFLAGS. It may also be necessary to give some options to ld by setting the LD 
variable. For example, type:

   ./configure --build=i686-unknown-linux-gnu CFLAGS=-m32 LD='ld -melf_i386'

To use this configuration, add OPTION=32bits when invoking make, e.g.,

   make all MODE=debug OPTION=32bits


The result will be in ./build/i686-unknown-linux-gnu-debug/






MORE OPTIONS
------------

It's not required to type 'make all'. If you don't want everything
to be build, you can specify something else than 'all':


1) To compile the yices binaries only, type

   make MODE=<compilation mode> bin


2) To compile all the tests, type

   make MODE=<compilation mode> test


3) To compile the sat_solvers, type

   make MODE=<compilation mode> satsolver


4) To compile the libraries, type

   make MODE=<compilation mode> lib



5) To compile the objects only:

   make MODE=<compilation mode> objects


The resulting executables are in ./build/<platform>-<mode>/bin
The libraries are in ./build/<platform>-<mode>/lib
The objects are in ./build/<platform>-<mode>/obj



The possible compilation modes are defined in src/Makefile and test/Makefile.
Currently the possible compilation modes are:
  
  release
  static
  debug

  profile
  valgrind
  quantify
  purify
  gcov


If nothing is specified, the default MODE is release.



To select an alternative configuration, add OPTION=<option> to all
make commands. Currently only three options are allowed:

  OPTION=64bits     to compile in 64bits on a Mac OS/X platform
  OPTION=32bits     to compile in 32bits on a Linux/x86_64 platform
  OPTION=no-cygwin  to compile for Windows native on cygwin








SOURCE AND BINARY DISTRIBUTIONS
-------------------------------

1) source distribution:

Type 'make source-distribution'. 

This will build a tar file called 'yices2-src.tar.gz' in the './distributions' directory.



2) binary distributions:

   There are two types of distributions (as of Sept. 14th 2009).

   2a) SMT-COMP distribution. 

   This includes a version of Yices~2 similar to the one that entered the 
   SMT Competition in 2009. The binary can read formulas in SMT-LIB
   format and return SAT/UNSAT and can optionally construct a model.


   To build it do 

     'make smt-distribution'.

   This builds a tarfile whose name depends on the architecture and MODE.  
   
     yices2smt09-$(ARCH).tar.gz              if MODE=release (i.e. the default mode)
     yices2smt09-$(ARCH)-static-gmp.tar.gz   if MODE=static

     yices2smt09-$(ARCH)-$(MODE).tar.gz      for all other modes (this shouldn't be used much)         

   As above, the tarfiles are stored in './distributions'    


   2b) Full distribution. 

   This will include full binary distribution of Yices~2 (including binaries, libraries,
   include files + documentation and examples). 

   To build it, type

     'make binary-distribution'

   This builds a tarfile 'yices-2.0.0-$(ARCH)...' in ./distributions. As above, the 
   exact name depends on the architecture and compilation mode.






CLEANUP
-------

1) To cleanup the ./build/<platform>-<mode> directory:

   make MODE=<compilation mode> clean

this removes libraries, binaries, and object files.

The directories 

   ./build/<platform>-<mode>/obj
   ./build/<platform>-<mode>/bin
   ./build/<platform>-<mode>/lib

are preserved


2) Deeper cleanup:
 
To remove the build directory for the current platform and mode  (i.e., 
./build/<platform>-<mode> and everything in there):

   make build-clean MODE=mode
   make build_clean MODE=mode


To remove all build directories for the current platform: ./build/<platform>-*

   make arch-clean
   make arch_clean


To remove all build directories: ./build/*

   make all-clean
   make all_clean





NOTES FOR CYGWIN BUILDS
-----------------------

1) BEWARE OF BUGGY COMPILER

Noted in November 2009: The default Cygwin compiler (in /usr/bin/gcc) is
buggy and does not compile Yices properly.  This compiler is shown as
gcc version 3.4.4-999 in Cygwin's package manager (setup.exe), but
gcc --version returns:

    gcc (GCC) version 3.4.4 (cygming special, gdc 0.12, using dmd 0.125).

There's another compiler in /usr/bin/gcc-4 that works fine. It's
listed as gcc4 in the package manager. To select this compiler for Yices. 
type 

    ./configure CC=/usr/bin/gcc-4 ...


UPDATE (April 2010): THE PARAGRAPH ABOVE ABOUT BUGGY COMPILER IS
WRONG.  The bug was in Yices. The core in object_store.c and
object_store.h used pointer conversions that violate the strict
pointer aliasing rules of C. With optimization level -O2 or better,
GCC assume that two pointers of different types do not point to the
same thing. This assumption was not satisfied in object_code.h.


2) Supporting both RELEASE and STATIC modes on a Cygwin machine?

It's somewhat more complicated to build Yices in static and release
modes on Cygwin than on other platforms. The issue is that GMP can't
be installed in the standard place as both a static and a dynamic
library in cygwin. That's because each library uses a different 'gmp.h' 
include file (which is by default in /usr/include). 

A solution is to compile GMP twice and install the dynamic and static
libraries in different locations:

  First, build GMP as a dynamic library in the default location 
  (for example, use --enable-shared --disable-static --prefix=/usr
   when configuring GMP). The corresponding 'gmp.h' will be in /usr/include.

  Then, build GMP as a static library in a different location (say
  /tools/static_gmp/). This can be done by giving using --disable-shared
  --enable-static --prefix=/tools/static_gmp to GMP's configure script.
  This will install 'libgmp.a' in /tools/static_gmp/lib and 'gmp.h'
  in /tools/static_gmp/include.


After you've done that, you need to give special flags to the Yices's
configure script so that it can find 'libgmp.a' in its nonstandard
location and the corresponding 'gmp.h'. The best way to do this is 
to type

    ./configure --with-static-gmp=/tools/static_gmp/lib/libgmp.a \
    --with-static-gmp-include-dir=/tools/static_gmp/include

when you configure Yices on cygwin.






BUILDING A WINDOWS VERSION FROM CYGWIN
--------------------------------------

To build a version of Yices that can run on a native Windows machine,
one can either install mingw and msys and compile from there, or compile
from Cygwin using --build=i686-pc-mingw32 to select a mingw32 configuration.
For the result to work, one must either give the flag -mno-cygwin to gcc 
or use a cross compiler. (The -mno-cygwin is easier but may become obsolete).


1) Using the -mno-cygwin

On cygwin, the default compilation produces code that requires cygwin
libraries at run time. This code cannot run on a native Windows machine
that does not have cygwin installed. To build code that can run natively
on Windows, it is possible to compile with options -mno-cygwin on a
cygwin installation. To do this, type

   ./configure --build=i686-pc-mingw32 CFLAGS=-mno-cygwin

This will produce configuration file 'make.include.i686-pc-mingw32' in 
directory ./configs. To use this configuration file rather than the
default, add OPTION=no-cywgin when invoking make. For example,

   make all OPTION=no-cygwin
 
The result will be in ./build/i686-pc-mingw32-release/

Note: you need to have a version of GMP compiled for mingw32 for this
to work.


2) Using a cross compiler (on Cygwin)

Noted in November 2009: for some versions of Cygwin,

/usr/bin/gcc supports the -mno-cygwin flag but does not 
             compile Yices properly (incorrect optimization).

/usr/bin/gcc-4 compiles Yices properly but does not 
               support the -mno-cygwin flag.


Possible fix: build and install a gcc cross compiler then compile
Yices with it.

It's a good idea to read the GCC documentation first to learn how to
do this (although it does not explain everything well). A Google
search on 'gcc cross compile mingw32' also helps and gives
examples/instructions on how to build GCC as a mingw32 cross
compiler. However none of the instructions I found via Google actually
worked for me, so here is what I did:

  a) compile and install binutil from the source:

     Give options --prefix=/xcompile --target=i686-pc-mingw32 to ./configure

     The binutil tools are installed in /xcompile/bin and /xcompile/i686-pc-mingw32/bin
     but under different names. For example, you may have 'ld' as
         /xcompile/bin/i686-pc-mingw32-ld.exe
         /xcompile/i686-pc-mingw32/bin/ld.exe


  b) install the mingw runtime support:

     Get the following tarfiles from the MinGW sourceforge: 

        mingwrt-3.16-mingw32-dev.tar.gz
        mingwrt-3.16-mingw32-dll.tar.gz (not sure that one is really necessary)
        w32api-3.14-mingw32-dev.tar.gz 

     (these are the versions I used).

     Untar and copy their content in the right place. I copied the content of
     these tarfiles both in /xcompile/ and in /xcompile/i686-pc-mingw32/
     (because I'm not sure where they should go).


  c) compile and install a recent version of GCC from the source:

     I used GCC 4.4.2 for C and C++, configured GCC as follows

       ../gcc-4.4.2/configure --prefix=/xcompile --target=i686-pc-mingw32 --disable-nls \
         --enable-threads --disable-shared --with-as=/xcompile/i686-pc-mingw32/bin/as.exe \
         --with-ld=/xcompile/i686-pc-mingw32/bin/ld.exe

     (Note that you need GMP and MFPR installed in Cygwin to compile GCC)

     After 'make' and 'make install', this should install gcc (and g++) in two places:

         /xcompile/bin/i686-pc-mingw32-gcc.exe  (the one that works)
         /xcompile/i686-pc-mingw32/bin/gcc.exe  (the one that doesn't)

     Only the first one works well for me. The other can be used too
     but with some tedious effort (using obscure command-line flags).



Before compiling Yices, you need to compile GMP for mingw32 (and install it
in /xcompile/lib).

To configure Yices for cross compilation on a Cygwin system, I used

   ./configure --build=i686-pc-mingw32 \
               CC=/xcompile/bin/i686-pc-mingw32-gcc.exe \
               LD=/xcompile/bin/i686-pc-mingw32-ld.exe \
	       AR=/xcompile/bin/i686-pc-mingw32-ar.exe \
	       STRIP=/xcompile/bin/i686-pc-mingw32-strip.exe \
               RANLIB=/xcompile/bin/i686-pc-mingw32-ranlib.exe \
               LDFLAGS=-L/xcompile/lib
               
Then to select this configuration:

   make OPTION=no-cygwin ....



NOTES FOR GCC 4.4.x
-------------------

Compiling yices with gcc-4.4 with the default options causes a
lot of warnings of the form: 

  inlining failed in call to 'xxx': call is unlikely and code size would grow

The yices functions that are declared 'inline' are small and do not
cause much code growth. So these warnings are annoying.

This is caused by heuristics GCC employs to determine whether inlining
a function call is worth doing. GCC attempts to determine whether a
basic block is executed frequently enough before inlining the function
calls in that block. By default, GCC uses crude heuristics to guess
the execution frequency of each block (and other heuristics to
estimate code growth).

The part about 'code size would grow' can be misleading. The warning
will be produced even if inlining does not cause any code growth at
all, probably because the code-growth estimate is not very accurate.

There are several ways to fix this:

1) remove -Winline from the compilation flags. GCC will inline whatever it
   wants and there will be no warnings.

2) add  __attribute__ ((always_inline)) to the inline functions that cause 
   problem. GCC will inline them.

3) add option -fno-guess-branch-probability to CFLAGS.

4) play with the parameters that control what GCC considers high enough frequency
   (e.g., add option --param hot-bb-frequency-fraction=2000)

