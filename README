CONTENT AND DIRECTORY STRUCTURE
-------------------------------

The source subdirectories include

  ./src:         source code for Yices proper
  ./tests:       source code for test programs
  ./doc:         documentation
  ./examples:    example input files for testing
  ./etc:         miscellaneous files that get added to the tar files


The build subdirectory is organized by platform + compilation mode.
The possible compilation modes are release, debug, and others for profiling. 
The default mode is 'release'.

For example, on an intel Mac, there may be two directories below build:

  ./build/i386-apple-darwin8.9.1-release
  ./build/i386-apple-darwin8.9.1-debug

Each of these directories contains subdirectories for objects,
libraries, binaries, etc. In each build mode, there are two variant
compilation options, namely, with or without GMP statically linked.
So this gives 6 different subdirectories:

  ./build/i386-apple-darwin8.9.1-release/obj
  ./build/i386-apple-darwin8.9.1-release/lib
  ./build/i386-apple-darwin8.9.1-release/bin

  ./build/i386-apple-darwin8.9.1-release/static_obj
  ./build/i386-apple-darwin8.9.1-release/static_lib
  ./build/i386-apple-darwin8.9.1-release/static_bin


When a distribution is built, the relevant files are copied
into one of the subdirectories:

  ./build/i386-apple-darwin8.9.1-release/dist
  ./build/i386-apple-darwin8.9.1-release/static_dist

The distribution tarfiles are built from the content of these 
dist or static_dist directories and they are stored into

  ./distributions

This is also where the source tarfile is stored if a source
distribution is built.





CONFIGURATION
-------------

Configuration files are generated by ./configure, and are kept
separate for each platform. They are stored in the ./configs
subdirectory, with a name of the form 'make.include.<platform>'.

The rationale for this organization is to support parallel compilation
on several machines from the same source directory (i.e., without
having to run ./configure every time on each machine). Yices 1.0.xx
does not allow this and that's a pain whenever we release a new
version.

The Makefile in the top-level directory determines the architecture
and OS, and checks the compilation mode. The platform is determined
from the architecture and OS and 'make' reads the configuration file
for that platform. This sets several variables that are passed to a
recursive make:

  ARCH=<target-platform>
  POSIXOS=<operating system>
  YICES_TOP_DIR=<top-level directory>
  YICES_MAKE_INCLUDE=<config file to use>
  YICES_MODE=<compilation mode>
  YICES_VERSION=2.x.y
  MAJOR=2
  MINOR=x
  PATCH_LEVEL=y


To see how these variables are set just type 'make' or 'make MODE=<mode>'. 
For example on a linux/x86_64 platform, typing 'make MODE=debug' gives

  ARCH is x86_64-unknown-linux-gnu
  POSIXOS is linux
  YICES_TOP_DIR is /homes/bruno/yices2
  YICES_MAKE_INCLUDE is configs/make.include.x86_64-unknown-linux-gnu
  YICES_MODE is debug
  YICES_VERSION is 2.x.y


More variables are set during configuration. For trouble-shooting, you
can see the full list by typing 'make recheck' from the toplevel Yices
directory. In most cases, these variables (CC, LD, etc.) are set to
good default values, but the defaults may be overridden by giving
options to the ./configure script.




Some Yices-specific variables are set at configuration time for dealing
with GMP:

  STATIC_GMP=<path to a libgmp.a to use for static binaries>
  STATIC_GMP_INCLUDE_DIR=<path to directory where 'gmp.h' compatible
                          with STATIC_GMP can be found>

  PIC_GMP=<path to a libgmp.a suitable for inclusion in a dynamic library>
  PIC_GMP_INCLUDE_DIR=<as above but for PIC_GMP>


The STATC_GMP and STATIC_GMP_INCLUDE_DIR are useful for building
static yices binaries on Mingw or Cygwin. On these systems, it's not
possible to have both static and dynamic GMP libraries in standard
locations. The Yices makefiles use STATIC_GMP and
STATIC_GMP_INCLUDE_DIR when building static binaries on these systems.

To build a dynamic Yices library that's statically linked with GMP, we
need a version of libgmp.a compiled as position-independent code. By
default, libgmp.a is not position-independent on most systems, so we
must build a special version of libgmp.a. The PIC_GMP variable must
be set to point to that special libgmp.a.


The ./configure script tries to set reasonable default values for
these four variables. If that fails, or if the defaults are wrong, the
following options to ./configure can be used:

   --with-static-gmp=<path to libgmp.a>
   --with-static-gmp-include-dir=<corresponding include dir>

   --with-pic-gmp=<path to PIC libgmp,a>
   --with-pic-gmp-include-dir=<corresponding include dir>


(NOTE: the PIC_GMP_INCLUDE_DIR is currently ignored)



In addition to these GMP-related options, the standard ./configure
options are supported. Type ./configure --help for more details.



BUILDING YICES USING THE DEFAULT CONFIGURATION
----------------------------------------------

To build Yices from the source on a new platform:

1) run autoconf

2) run ./configure

   If all goes well, this will produce a configuration file  
   make.include.<platform> in the ./configs directory.   


3) compile using the default mode (same as MODE=release)

      make all

   This produces two versions of the binaries and libraries 
   (with and without GMP statically linked) in:
       
      ./build/<platform>-release/bin 
      ./build/<platfomr>-release/static_bin
      ./build/<platform>-release/lib
      ./build/<platform>-release/static_lib
       

   To compile only part of this, use;

      make bin 
      make lib
      make static-bin
      make static-lib


4) build the distribution tarfiles:

      make binary-distribution

   builds ./distributions/yices-2.x.y-<platform>.tar.gz
   that contains binaries + libraries dynamically linked with GMP.

      make static-distribution

   builds ./distributions/yices-2.x.y-<platform>-static-gmp.tar.gz
   that contains binaries + libraries statically linked with GMP.


   On Mingw: there's a manual step involved to create a 'libyices.lib'
   file using Microsoft's Visual Studio tools. The distributions
   must be built as follows:

      make dist
      <manual step to create libyices.lib>
      make tarfile

   or make static-dist
      <manual step ...>
      make static-tarfile



5) to compile all the tests:

      make test

   to compile the test statically

      make static-test

   The test executables are in ./build-<platform>-<mode>/bin or 
    ./build-<platform>-<mode>/static_bin.




USING ALTERNATIVE CONFIGURATIONS
--------------------------------

1) Compiling in 64bits on Mac OS/X

On Mac OS X/intel platforms (at least since version 10.5/Leopard), it
is possible to produce objects/libraries/executables either in
32bit or in 64bit mode. The default is 32bit. 

To override the default, build an alternative configuration file 
for platform 'x86_64-apple-darwin9.x.y' with flag -m64 added to 
CFLAGS to force compilation in 64bits mode. For example

   ./configure --build=x86_64-apple-darwin9.2.2 CFLAGS=-m64

(The version number 2.2 changes with each patch/new version of
Darwin. Adjust this as needed).

To use this configuration, add OPTION=64bits to the command line
when using make. For example

   make all MODE=static OPTION=64bits


The result will be in ./build/x86-64-apple-darwin9.2.2-static/




2) Compiling in 32bits on Linux/x86_64 platforms

On Linux/x86_64 platforms, it may be possible to also compile in 32 bit mode.
This depends on libraries and GCC versions, but it can work. By default the 
makefiles will compile in 64bit mode for this platforms. 

To override this, build an alternative configuration file for the platform
'i686-unknown-linux-gnu'. To force compilation in 32bit modes, add the flag -m32 
to CFLAGS. It may also be necessary to give some options to ld by setting the LD 
variable. For example, type:

   ./configure --build=i686-unknown-linux-gnu CFLAGS=-m32 LD='ld -melf_i386'

To use this configuration, add OPTION=32bits when invoking make, e.g.,

   make all MODE=debug OPTION=32bits


The result will be in ./build/i686-unknown-linux-gnu-debug/



CLEANUP
-------

To cleanup the ./build/<platform>-<mode> directory:

   make MODE=<mode> clean

this removes libraries, binaries, and object files.


To remove all build directories for the current platform: ./build/<platform>-*

   make arch-clean


To remove all build directories: ./build/*

   make all-clean





NOTES FOR CYGWIN AND MINGW BUILDS
---------------------------------

It's somewhat more complicated to build Yices with both static and
dynamic GMP libraries on Cygwin and Mingw than on other platforms. The
issue is that GMP can't be installed in the standard place as both a
static and a dynamic library. That's because each library uses a
different 'gmp.h' include file (which is by default in /usr/include).

A solution is to compile GMP twice and install the dynamic and static
libraries in different locations:

  First, build GMP as a dynamic library in the default location 
  (for example, use --enable-shared --disable-static --prefix=/usr
   when configuring GMP). The corresponding 'gmp.h' will be in /usr/include.

  Then, build GMP as a static library in a different location (say
  /tools/static_gmp/). This can be done by giving options
      --disable-share --enable-static --prefix=/tools/static_gmp 
  to GMP's configure script.  This will install 
       'libgmp.a' in /tools/static_gmp/lib 
   and 'gmp.h' in /tools/static_gmp/include.


After you've done that, you need to give special flags to the Yices's
configure script so that it can find 'libgmp.a' in its nonstandard
location and the corresponding 'gmp.h'. The best way to do this is 
to type

    ./configure --with-static-gmp=/tools/static_gmp/lib/libgmp.a \
    --with-static-gmp-include-dir=/tools/static_gmp/include

when you configure Yices on Cygwin or Mingw.

On both Cygwin and Mingw, the static 'libgmp.a' is position independent
code so there's no need to specify a different PIC gmp. The option 
--with-pic-gmp should not be used on Cygwin or Mingw.






BUILDING A WINDOWS VERSION FROM CYGWIN
--------------------------------------

To build a version of Yices that can run on a native Windows machine,
one can either install Mingw and msys and compile from there, or
compile from Cygwin using --build=i686-pc-mingw32 to select a Mingw32
configuration.  For the result to work, one must either give the flag
-mno-cygwin to GCC or use a cross compiler. Using -mno-cygwin is
easier but may no longer be supported by new versions of GCC.


1) Using the -mno-cygwin flag

On Cygwin, the default compilation produces code that requires Cygwin
libraries at run time. This code cannot run on a native Windows machine
that does not have Cygwin installed. To build code that can run natively
on Windows, it is possible to compile with options -mno-cygwin on a
Cygwin installation. To do this, type

   ./configure --build=i686-pc-mingw32 CFLAGS=-mno-cygwin

This will produce configuration file 'make.include.i686-pc-mingw32' in 
directory ./configs. To use this configuration file rather than the
default, add OPTION=no-cywgin when invoking make. For example,

   make all OPTION=no-cygwin
 
The result will be in ./build/i686-pc-mingw32-release/

You need to have a version of GMP compiled for mingw32 for this to
work. The path to that library can be given using --with-static-gmp,
etc. or by giving options LDPATH=... CPPFLAGS=... to ./configure




2) Using a cross compiler (on Cygwin)

Noted in November 2009:

Some versions of GCC on Cygwin do not support the option -mno-cygwin.

On my Cygwin machine, there are two compilers:
  /usr/bin/gcc supports the -mno-cygwin flag
  /usr/bin/gcc-4 does not support the -mno-cygwin flag.


It looks like -mno-cygwin won't be supported much longer by GCC. If
your compiler does not have it. It's possible to build and install a
GCC cross compiler (that runs on Cygwin and targets Mingw32), then
compile Yices with it.

It's a good idea to read the GCC documentation first to learn how to
do this (although it does not explain everything well). A Google
search on 'gcc cross compile Mingw32' also helps and gives
examples/instructions on how to build GCC as a Mingw32 cross
compiler. However none of the instructions I found via Google actually
worked for me, so here is what I did:

  a) compile and install binutil from the source for 'mingw32'

     Give options --prefix=/xcompile --target=i686-pc-mingw32 to ./configure

     The binutil tools are installed in /xcompile/bin and /xcompile/i686-pc-mingw32/bin
     but under different names. For example, you may have 'ld' as
         /xcompile/bin/i686-pc-mingw32-ld.exe
         /xcompile/i686-pc-mingw32/bin/ld.exe


  b) install the Mingw runtime support:

     Get the following tarfiles from the Mingw sourceforge: 

        mingwrt-3.16-mingw32-dev.tar.gz
        mingwrt-3.16-mingw32-dll.tar.gz (not sure that one is really necessary)
        w32api-3.14-mingw32-dev.tar.gz 

     (these are the versions I used).

     Untar and copy their content in the right place. I copied the content of
     these tarfiles both in /xcompile/ and in /xcompile/i686-pc-mingw32/
     (because I'm not sure where they should go).


  c) compile and install a recent version of GCC from the source:

     I used GCC 4.4.2 for C and C++, configured GCC as follows

       ../gcc-4.4.2/configure --prefix=/xcompile --target=i686-pc-mingw32 --disable-nls \
         --enable-threads --disable-shared --with-as=/xcompile/i686-pc-mingw32/bin/as.exe \
         --with-ld=/xcompile/i686-pc-mingw32/bin/ld.exe

     (Note that you need GMP and MFPR installed in Cygwin to compile GCC)

     After 'make' and 'make install', this should install gcc (and g++) in two places:

         /xcompile/bin/i686-pc-mingw32-gcc.exe  (the one that works)
         /xcompile/i686-pc-mingw32/bin/gcc.exe  (the one that doesn't)

     Only the first one works well for me. The other can be used too
     but with some tedious effort (using obscure command-line flags).



Before compiling Yices, you need to compile GMP for Mingw32 (and install it
in /xcompile/lib).

To configure Yices for cross compilation on a Cygwin system, I used

   ./configure --build=i686-pc-mingw32 \
               CC=/xcompile/bin/i686-pc-mingw32-gcc.exe \
               LD=/xcompile/bin/i686-pc-mingw32-ld.exe \
	       AR=/xcompile/bin/i686-pc-mingw32-ar.exe \
	       STRIP=/xcompile/bin/i686-pc-mingw32-strip.exe \
               RANLIB=/xcompile/bin/i686-pc-mingw32-ranlib.exe \
               LDFLAGS=-L/xcompile/lib
               
Then to select this configuration:

   make OPTION=no-cygwin ....



